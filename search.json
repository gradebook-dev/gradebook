[{"path":"https://gradebook-dev.github.io/gradebook/articles/gs-demo-walkthrough.html","id":"load-in-data","dir":"Articles","previous_headings":"","what":"Load in data","title":"Example with GS Demo Data","text":"","code":"gs_demo #> # A tibble: 10 × 44 #>    Names               Email           SID Sections `Lab 1` `Lab 1 - Max Points` #>    <chr>               <chr>         <dbl> <chr>      <dbl>                <dbl> #>  1 Dr. Kadin           Dr.Kadin@be… 3.03e9 fake-cl…       9                   10 #>  2 Bartley Toy         BartleyToy@… 3.03e9 fake-cl…       5                   10 #>  3 Dr. Dontae          Dr.Dontae@b… 3.03e9 fake-cl…      10                   10 #>  4 Narcissus Considine NarcissusCo… 3.03e9 fake-cl…      10                   10 #>  5 Verne Wilderman     VerneWilder… 3.03e9 fake-cl…       8                   10 #>  6 Toivo Witting       ToivoWittin… 3.03e9 fake-cl…       9                   10 #>  7 Tegan Crooks        TeganCrooks… 3.03e9 fake-cl…       8                   10 #>  8 Tyrus Cremin-Wisozk TyrusCremin… 3.03e9 fake-cl…       2                   10 #>  9 Sydni Hansen        SydniHansen… 3.03e9 fake-cl…       8                   10 #> 10 Mrs. Chelsie        Mrs.Chelsie… 3.03e9 fake-cl…       5                   10 #> # ℹ 38 more variables: `Lab 1 - Submission Time` <chr>, #> #   `Lab 1 - Lateness (H:M:S)` <hms>, `Lab 2` <dbl>, #> #   `Lab 2 - Max Points` <dbl>, `Lab 2 - Submission Time` <chr>, #> #   `Lab 2 - Lateness (H:M:S)` <hms>, `Lab 3` <dbl>, #> #   `Lab 3 - Max Points` <dbl>, `Lab 3 - Submission Time` <chr>, #> #   `Lab 3 - Lateness (H:M:S)` <hms>, `Lab 4` <dbl>, #> #   `Lab 4 - Max Points` <dbl>, `Lab 4 - Submission Time` <chr>, …"},{"path":"https://gradebook-dev.github.io/gradebook/articles/nested-group_bys.html","id":"the-demo-data-set","dir":"Articles","previous_headings":"","what":"The demo data set","title":"How to implement nested grouped operations?","text":"","code":"library(dplyr)  grades_a <- tibble(student_id = rep(c(\"4863\", \"5211\", \"4893\"), each = 3),                    assignment = rep(c(\"ps_1\", \"ps_2\", \"exam\"), 3),                    pts_earned = c(17, 32, 86,                                   17, 29, 75,                                   16, 23, 92),                    pts_max    = rep(c(25, 36, 100), 3),                    category   = rep(c(\"ps\", \"ps\", \"exam\"), 3)) grades_a #> # A tibble: 9 × 5 #>   student_id assignment pts_earned pts_max category #>   <chr>      <chr>           <dbl>   <dbl> <chr>    #> 1 4863       ps_1               17      25 ps       #> 2 4863       ps_2               32      36 ps       #> 3 4863       exam               86     100 exam     #> 4 5211       ps_1               17      25 ps       #> 5 5211       ps_2               29      36 ps       #> 6 5211       exam               75     100 exam     #> 7 4893       ps_1               16      25 ps       #> 8 4893       ps_2               23      36 ps       #> 9 4893       exam               92     100 exam # policy a course_grade:   aggregation: mean   categories:     exams:       aggregation: mean       assignments:         - exam     ps:       aggregation: mean       assignments:         - ps_1_written         - ps_1_code         - ps_2_written         - ps_2_code grades_b <- tibble(student_id = rep(c(\"4863\", \"5211\", \"4893\"), each = 5),                    assignment = rep(c(\"ps_1_written\",                                        \"ps_1_code\",                                       \"ps_2_written\",                                       \"ps_2_code\",                                       \"exam\"), 3),                    pts_earned = c(12, 5, 19, 13, 86,                                   11, 6, 19, 10, 75,                                   8, 8, 10, 13, 92),                    pts_max    = rep(c(15, 10, 20, 16, 100), 3),                    category   = rep(c(\"ps\", \"ps\", \"ps\", \"ps\", \"exam\"), 3),                    subcategory = rep(c(\"ps_1\", \"ps_1\", \"ps_2\", \"ps_2\", \"exam\"), 3)) grades_b #> # A tibble: 15 × 6 #>    student_id assignment   pts_earned pts_max category subcategory #>    <chr>      <chr>             <dbl>   <dbl> <chr>    <chr>       #>  1 4863       ps_1_written         12      15 ps       ps_1        #>  2 4863       ps_1_code             5      10 ps       ps_1        #>  3 4863       ps_2_written         19      20 ps       ps_2        #>  4 4863       ps_2_code            13      16 ps       ps_2        #>  5 4863       exam                 86     100 exam     exam        #>  6 5211       ps_1_written         11      15 ps       ps_1        #>  7 5211       ps_1_code             6      10 ps       ps_1        #>  8 5211       ps_2_written         19      20 ps       ps_2        #>  9 5211       ps_2_code            10      16 ps       ps_2        #> 10 5211       exam                 75     100 exam     exam        #> 11 4893       ps_1_written          8      15 ps       ps_1        #> 12 4893       ps_1_code             8      10 ps       ps_1        #> 13 4893       ps_2_written         10      20 ps       ps_2        #> 14 4893       ps_2_code            13      16 ps       ps_2        #> 15 4893       exam                 92     100 exam     exam # policy b categories:   aggregation: mean   exams:     aggregation: mean     assignments:       - exam   ps:     aggregation: mean     categories:       ps_1:         aggregation: by points         assignments:           - ps_1_written           - ps_1_code       ps_2:         aggregation: by points         assignments:           - ps_2_written           - ps_2_code"},{"path":[]},{"path":"https://gradebook-dev.github.io/gradebook/articles/nested-group_bys.html","id":"i--hardcode-scores","dir":"Articles","previous_headings":"Policy A","what":"I. Hardcode scores","title":"How to implement nested grouped operations?","text":"","code":"grades_a |>     mutate(score = pts_earned / pts_max) |>     group_by(student_id, category) |>     summarize(cat_score = mean(score)) |>     summarize(course_grade = mean(cat_score)) #> `summarise()` has grouped output by 'student_id'. You can override using the #> `.groups` argument. #> # A tibble: 3 × 2 #>   student_id course_grade #>   <chr>             <dbl> #> 1 4863              0.822 #> 2 4893              0.780 #> 3 5211              0.746"},{"path":[]},{"path":"https://gradebook-dev.github.io/gradebook/articles/nested-group_bys.html","id":"i--hardcode-scores-1","dir":"Articles","previous_headings":"Policy B","what":"I. Hardcode scores","title":"How to implement nested grouped operations?","text":"","code":"grades_b |>     group_by(student_id, category, subcategory) |>     summarize(tot_earned = sum(pts_earned),               tot_max    = sum(pts_max)) |>     ungroup() |>     mutate(score = tot_earned / tot_max) |>     group_by(student_id, category) |>     summarize(cat_score = mean(score)) |>     summarize(course_grade = mean(cat_score)) #> `summarise()` has grouped output by 'student_id', 'category'. You can override #> using the `.groups` argument. #> `summarise()` has grouped output by 'student_id'. You can override using the #> `.groups` argument. #> # A tibble: 3 × 2 #>   student_id course_grade #>   <chr>             <dbl> #> 1 4863              0.822 #> 2 4893              0.780 #> 3 5211              0.746"},{"path":"https://gradebook-dev.github.io/gradebook/articles/nested-group_bys.html","id":"questions","dir":"Articles","previous_headings":"","what":"Questions","title":"How to implement nested grouped operations?","text":"Can made general replacing mutate() step inclusion weights column aggregations just weighted sums? represent subcategories data frame category-specific? E.g. exam category subcategory? NA, won’t lumped NA group_by? approach pulling categories list (ragged array) appending grades data frame (square array). work better effectively take scores data frame append list? Said another way, using dplyr functions like group_by() summarize(), purrr functions like group_map(), nest() tidyr?","code":""},{"path":"https://gradebook-dev.github.io/gradebook/articles/work_flow.html","id":"category-vs-assignments","dir":"Articles","previous_headings":"","what":"Category vs Assignments","title":"General Work Flow","text":"Description .","code":""},{"path":"https://gradebook-dev.github.io/gradebook/articles/work_flow.html","id":"user-input","dir":"Articles","previous_headings":"","what":"User Input","title":"General Work Flow","text":"Description .","code":""},{"path":"https://gradebook-dev.github.io/gradebook/articles/work_flow.html","id":"grading","dir":"Articles","previous_headings":"","what":"Grading","title":"General Work Flow","text":"Description .","code":""},{"path":"https://gradebook-dev.github.io/gradebook/articles/work_flow.html","id":"summaries-and-distributions","dir":"Articles","previous_headings":"","what":"Summaries and Distributions","title":"General Work Flow","text":"Description .","code":""},{"path":"https://gradebook-dev.github.io/gradebook/articles/work_flow.html","id":"coming-soon-","dir":"Articles","previous_headings":"","what":"Coming soon.","title":"General Work Flow","text":"Slip days Aggregated Assignments","code":""},{"path":"https://gradebook-dev.github.io/gradebook/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nikita Jayaprakash. Author, maintainer. Monika Voutov. Author.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jayaprakash N, Voutov M (2023). gradebook: Package (One Line, Title Case). R package version 0.0.0.9000, https://gradebook-dev.github.io/gradebook/.","code":"@Manual{,   title = {gradebook: What the Package Does (One Line, Title Case)},   author = {Nikita Jayaprakash and Monika Voutov},   year = {2023},   note = {R package version 0.0.0.9000},   url = {https://gradebook-dev.github.io/gradebook/}, }"},{"path":"https://gradebook-dev.github.io/gradebook/reference/assignments_gs.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Assignments Table from Input Data — assignments_gs","title":"Create Assignments Table from Input Data — assignments_gs","text":"function takes gradescope dataframe assignments created generating assignment table.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/assignments_gs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Assignments Table from Input Data — assignments_gs","text":"","code":"assignments_gs(unique_student_ids)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/assignments_gs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Assignments Table from Input Data — assignments_gs","text":"assignments_gs dataframe (csv) gradescope containing unique student IDs information (output unique_student_ids function).","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/assignments_gs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Assignments Table from Input Data — assignments_gs","text":"tibble dataframe processed assignment table.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/check_cat_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Category Names — check_cat_names","title":"Check Category Names — check_cat_names","text":"functions checks names single category policy file","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/check_cat_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Category Names — check_cat_names","text":"","code":"check_cat_names(category_name)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/check_cat_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Category Names — check_cat_names","text":"category_name names within category policy file","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/check_cat_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Category Names — check_cat_names","text":"returns logical vector","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/check_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Names for Policy File — check_names","title":"Check Names for Policy File — check_names","text":"functions checks names throughout policy file","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/check_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Names for Policy File — check_names","text":"","code":"check_names(policy)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/check_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Names for Policy File — check_names","text":"policy_file policy file validated right format terms names nesting","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/check_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Names for Policy File — check_names","text":"output, stops warnings","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/check_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Values for Policy File — check_values","title":"Check Values for Policy File — check_values","text":"functions checks values throughout policy file","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/check_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Values for Policy File — check_values","text":"","code":"check_values(policy_file)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/check_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Values for Policy File — check_values","text":"policy_file policy file validated right format terms values datatypes","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/check_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Values for Policy File — check_values","text":"output, stops warnings","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/delete_category.html","id":null,"dir":"Reference","previous_headings":"","what":"Deletes category with name ","title":"Deletes category with name ","text":"Deletes category name \"name\"","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/delete_category.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deletes category with name ","text":"","code":"delete_category(policy_list, name)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/delete_category.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deletes category with name ","text":"policy_list policy list adding category previous one. name name category.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/delete_category.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deletes category with name ","text":"list.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_cat_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Finds index of category within a policy list — get_cat_index","title":"Finds index of category within a policy list — get_cat_index","text":"Finds index category within policy list","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_cat_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finds index of category within a policy list — get_cat_index","text":"","code":"get_cat_index(policy_list, name)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_cat_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finds index of category within a policy list — get_cat_index","text":"policy_list policy list adding category previous one. name name category.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_cat_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finds index of category within a policy list — get_cat_index","text":"integer.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_cat_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Finds index of category within a policy list — get_cat_index","text":"","code":"get_cat_index( update_category(name = \"LABS\"), \"LABS\") #> [1] 1"},{"path":"https://gradebook-dev.github.io/gradebook/reference/gs_demo.html","id":null,"dir":"Reference","previous_headings":"","what":"Gradescope Demo Data — gs_demo","title":"Gradescope Demo Data — gs_demo","text":"fake dataset mimics Gradescope .csv format","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/gs_demo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gradescope Demo Data — gs_demo","text":"","code":"gs_demo"},{"path":[]},{"path":"https://gradebook-dev.github.io/gradebook/reference/gs_demo.html","id":"gs-demo","dir":"Reference","previous_headings":"","what":"gs_demo","title":"Gradescope Demo Data — gs_demo","text":"data frame 10 rows 44 columns: Names student name Email student email SID student ID number Sections student class section Lab 1 assignment called Lab 1 Lab 1 - Max Points maximum possible points Lab 1 Lab 1 - Lateness (H:M:S) late Lab 1 turned , formatted HH:MM:SS following assignments follow three-column format Lab 1. Additional assignments gs_demo follows: Lab 2, Lab 3, Lab 4, Lab 5, Lab 6, Discussion 1, Discussion 2, Midterm Final","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/pivot_gs.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert GS data to longer table — pivot_gs","title":"Convert GS data to longer table — pivot_gs","text":"function takes gradescope dataframe processed remove duplicate students invalid IDs applies pivot longer function allow unit observation student + individual assignment","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/pivot_gs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert GS data to longer table — pivot_gs","text":"","code":"pivot_gs(processed_data)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/pivot_gs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert GS data to longer table — pivot_gs","text":"processed_data dataframe (csv Gradescope) containing column named \"sid\" holds student IDs.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/pivot_gs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert GS data to longer table — pivot_gs","text":"dataframe \"student_assignments_long\": dataframe unit observation student + assignment.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/pivot_gs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert GS data to longer table — pivot_gs","text":"","code":"# Example processed_data <- tibble::tibble(   `sid` = c(3032412514, 3032122516, 3032412516,             3032412517, 3032412518, 3032412519,             3032412521, 3032412521),   `section` = c(\"Stat20\", \"Stat20\", \"Stat20\", \"Stat20\",                 \"Stat20\", \"Stat20\", \"Stat20\", \"Stat20\"),      `name` = c(\"John Smith\", \"Jane Doe\", \"Robert Brown\", \"Emily Johnson\",              \"Michael Davis\", \"Linda Wilson\", \"James Taylor\", \"Patricia Anderson\"),   `email` = c(\"john.smith@berkeley.edu\", \"jane.doe@berkeley.edu\",               \"robert.brown@berkeley.edu\", \"emily.johnson@berkeley.edu\",               \"michael.davis@berkeley.edu\", \"linda.wilson@berkeley.edu\",               \"james.taylor@berkeley.edu\", \"patricia.anderson@berkeley.edu\"),   `lab1` = c(1, 0, 0.9, 0.5, 1, 0.9, 1, 0.8),   `lab1_-_Max Points` = c(1, 1, 1, 1, 1, 1, 1, 1),   `lab1_-_Submission Time` = c(\"1/19/2023 9:25:00 AM\", \"0\", \"1/19/2023 10:00:00 AM\", \"0\",                                \"1/19/2023 9:00:00 AM\", \"1/19/2023 9:30:00 AM\", \"1/19/2023 9:20:00 AM\", \"1/19/2023 9:15:00 AM\"),   `lab1_-_Lateness (H:M:S)` = c(\"0:00:00\", \"0:00:00\", \"0:00:00\", \"0:00:00\",                                 \"0:00:00\", \"0:00:00\", \"0:00:00\", \"0:00:00\"),      `lab2` = c(1, 0, 0.9, 0.5, 1, 0.9, 1, 0.9),   `lab2_-_Max Points` = c(1, 1, 1, 1, 1, 1, 1, 1),   `lab2_-_Submission Time` = c(\"1/20/2023 9:25:00 AM\", \"0\", \"1/20/2023 10:00:00 AM\", \"1/20/2023 9:50:00 AM\",                                \"1/20/2023 9:00:00 AM\", \"0\", \"1/20/2023 9:20:00 AM\", \"1/20/2023 9:30:00 AM\"),   `lab2_-_Lateness (H:M:S)` = c(\"0:00:00\", \"0:00:00\", \"0:00:00\", \"0:00:00\", \"0:00:00\", \"0:00:00\", \"0:00:00\", \"0:00:00\"),      `lab3` = c(0, 0, 0.9, 0.5, 1, 0.9, 1, 0.9),   `lab3_-_Max Points` = c(1, 1, 1, 1, 1, 1, 1, 1),   `lab3_-_Submission Time` = c(\"0\", \"0\", \"1/21/2023 10:00:00 AM\", \"1/21/2023 9:50:00 AM\", \"1/21/2023 9:00:00 AM\", \"1/21/2023 9:30:00 AM\", \"1/21/2023 9:20:00 AM\", \"1/21/2023 9:45:00 AM\"),   `lab3_-_Lateness (H:M:S)` = c(\"0:00:00\", \"0:00:00\", \"0:00:00\", \"0:00:00\", \"0:00:00\", \"0:00:00\", \"0:00:00\", \"0:00:00\"),      `project1` = c(0.9, 0, 0.4, 0, 0.99, 0.9, 1, 0.9),   `project1_-_Max Points` = c(1, 1, 1, 1, 1, 1, 1, 1),   `project1_-_Submission Time` = c(\"1/22/2023 9:25:00 AM\", \"0\", \"1/22/2023 10:00:00 AM\", \"0\", \"1/22/2023 9:00:00 AM\", \"1/22/2023 9:30:00 AM\", \"1/22/2023 9:20:00 AM\", \"1/22/2023 9:45:00 AM\"),   `project1_-_Lateness (H:M:S)` = c(\"0:00:00\", \"0:00:00\", \"0:00:00\", \"0:00:00\", \"0:00:00\", \"0:00:00\", \"0:00:00\", \"0:00:00\") )  student_assignments_long_data <- pivot_gs(processed_data) #> Warning: Expected 2 pieces. Missing pieces filled with `NA` in 4 rows [1, 5, 9, 13]."},{"path":"https://gradebook-dev.github.io/gradebook/reference/policy_demo.html","id":null,"dir":"Reference","previous_headings":"","what":"Policy Demo File — policy_demo","title":"Policy Demo File — policy_demo","text":"demo policy file mimics hypothetical class syllabus","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/policy_demo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Policy Demo File — policy_demo","text":"","code":"policy_demo"},{"path":"https://gradebook-dev.github.io/gradebook/reference/policy_demo.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Policy Demo File — policy_demo","text":"list three nested lists COURSEWIDE first nested list general information class course_name name course description relevant course description, purely user CATEGORIES second nested list syllabus broken categories respective grading criteria name category name slipdays number slip days late_time1, late_time2 cutoffs lateness penalty late_scale1, late_scale2 lateness penalty respective lateness cutoffs TRUE, late_scale1 applied late_time1 passed; FALSE, late_scale1 applied late_scale2 passed; late_scale2 late_time2 weight weight category overall grade drops number lowest-score assignments dropped grade weighted_equally TRUE, assignments weighted percentages; FALSE, assignments weighted max-point value clobber clobber-category higher grade one, clobber-category's grade replaces grade category assigns list assignment names falls category CUTOFF third final nested list cutoff reflects lower bound cutoff letter grade: ,B,C,D,F","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/policy_demo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Policy Demo File — policy_demo","text":"","code":"yaml::as.yaml(policy_demo) #> [1] \"coursewide:\\n  course_name: Demo Course\\n  description: This is a demo class dataset to demonstrate the app.\\ncategories:\\n- name: Labs\\n  slipdays: 0.0\\n  late_time1: '00:00:00'\\n  late_time2: '00:00:01'\\n  late_scale1: 1.0\\n  late_scale2: 0.0\\n  after: yes\\n  weight: 55.0\\n  drops: 2.0\\n  weighted_method:\\n  - equally\\n  - by_points\\n  clobber: None\\n  assigns:\\n  - Lab 1\\n  - Lab 2\\n  - Lab 3\\n  - Lab 4\\n  - Lab 5\\n  - Lab 6\\n- name: Discussions\\n  slipdays: 0.0\\n  late_time1: '00:00:01'\\n  late_time2: '00:00:00'\\n  late_scale1: 1.0\\n  late_scale2: 0.0\\n  after: yes\\n  weight: 10.0\\n  drops: 0.0\\n  weighted_method:\\n  - equally\\n  - by_points\\n  clobber: None\\n  assigns:\\n  - Discussion 1\\n  - Discussion 2\\n- name: Midterm\\n  slipdays: 0.0\\n  late_time1: '00:00:01'\\n  late_time2: '00:00:00'\\n  late_scale1: 1.0\\n  late_scale2: 0.0\\n  after: yes\\n  weight: 15.0\\n  drops: 0.0\\n  weighted_method:\\n  - equally\\n  - by_points\\n  clobber: None\\n  assigns: Midterm\\n- name: Final\\n  slipdays: 0.0\\n  late_time1: '00:00:01'\\n  late_time2: '00:00:00'\\n  late_scale1: 1.0\\n  late_scale2: 0.0\\n  after: yes\\n  weight: 20.0\\n  drops: 0.0\\n  weighted_method:\\n  - equally\\n  - by_points\\n  clobber: None\\n  assigns: Final\\ncutoff:\\n  A: 90.0\\n  B: 80.0\\n  C: 70.0\\n  D: 60.0\\n  F: 0.0\\n\""},{"path":"https://gradebook-dev.github.io/gradebook/reference/process_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Student IDs — process_id","title":"Process Student IDs — process_id","text":"function processes dataset student IDs. handles erroneous student IDs filtering duplicates handling NA values. function returns dataframe unique student IDs","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/process_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Student IDs — process_id","text":"","code":"process_id(gs_data)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/process_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Student IDs — process_id","text":"gs_data dataframe (csv Gradescope) containing column named \"sid\" holds student IDs.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/process_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process Student IDs — process_id","text":"dataframe \"unique_ids\": dataframe containing unique student IDs.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/process_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process Student IDs — process_id","text":"","code":"# Example dataframe data <- data.frame(   sid = c(3032412514, NA, 3032412516,           3032412517, 3032412518, 3032412519, 3032412520, 3032412521, 3032412521),    name = c(\"John Smith\", \"Jane Doe\", \"Robert Brown\", \"Emily Johnson\",            \"Michael Davis\", \"Linda Wilson\", \"James Taylor\", \"Patricia Anderson\", \"Patricia Anderson\"),   email = c(\"john.smith@berkeley.edu\", \"jane.doe@berkeley.edu\", \"robert.brown@berkeley.edu\",             \"emily.johnson@berkeley.edu\", \"michael.davis@berkeley.edu\",             \"linda.wilson@berkeley.edu\", \"james.taylor@berkeley.edu\",             \"patricia.anderson@berkeley.edu\", \"patricia.anderson@berkeley.edu\"             )  ) processed_data <- process_id(data)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/update_category.html","id":null,"dir":"Reference","previous_headings":"","what":"Add or update category to policy list — update_category","title":"Add or update category to policy list — update_category","text":"Add update category policy list","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/update_category.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add or update category to policy list — update_category","text":"","code":"update_category(   policy_list,   name = \"Category\",   slipdays = 0,   late_time1 = \"00:00:00\",   late_time2 = \"00:00:00\",   late_scale1 = 1,   late_scale2 = 0,   after = TRUE,   weight = 0,   drops = 0,   weight_method = c(\"equally\", \"by_points\"),   clobber = \"None\",   assigns = c() )"},{"path":"https://gradebook-dev.github.io/gradebook/reference/update_category.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add or update category to policy list — update_category","text":"policy_list policy list adding category previous one. name name category. slipdays allowed slip days. late_time1 cutoff first lateness policy. late_time2 cutoff second lateness policy. late_scale1 scale first lateness policy. late_scale2 scale second lateness policy. whether late_scale1/late_scale2 applied late_time1/late_time2 weight weight category. drops allowed drops category. weight_method whether weighted equally points. clobber whether clobbered. assigns assignments included category.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/update_category.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add or update category to policy list — update_category","text":"list.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/update_category.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add or update category to policy list — update_category","text":"","code":"update_category(name = \"Labs\") #> [[1]] #> [[1]]$name #> [1] \"Labs\" #>  #> [[1]]$slipdays #> [1] 0 #>  #> [[1]]$late_time1 #> [1] \"00:00:00\" #>  #> [[1]]$late_time2 #> [1] \"00:00:00\" #>  #> [[1]]$late_scale1 #> [1] 1 #>  #> [[1]]$late_scale2 #> [1] 0 #>  #> [[1]]$after #> [1] TRUE #>  #> [[1]]$weight #> [1] 0 #>  #> [[1]]$drops #> [1] 0 #>  #> [[1]]$weighted_method #> [1] \"equally\"   \"by_points\" #>  #> [[1]]$clobber #> [1] \"None\" #>  #> [[1]]$assigns #> NULL #>  #>  update_category(name = \"Quizzes\") #> [[1]] #> [[1]]$name #> [1] \"Quizzes\" #>  #> [[1]]$slipdays #> [1] 0 #>  #> [[1]]$late_time1 #> [1] \"00:00:00\" #>  #> [[1]]$late_time2 #> [1] \"00:00:00\" #>  #> [[1]]$late_scale1 #> [1] 1 #>  #> [[1]]$late_scale2 #> [1] 0 #>  #> [[1]]$after #> [1] TRUE #>  #> [[1]]$weight #> [1] 0 #>  #> [[1]]$drops #> [1] 0 #>  #> [[1]]$weighted_method #> [1] \"equally\"   \"by_points\" #>  #> [[1]]$clobber #> [1] \"None\" #>  #> [[1]]$assigns #> NULL #>  #>"}]
