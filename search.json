[{"path":"https://gradebook-dev.github.io/gradebook/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://gradebook-dev.github.io/gradebook/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://gradebook-dev.github.io/gradebook/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://gradebook-dev.github.io/gradebook/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://gradebook-dev.github.io/gradebook/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://gradebook-dev.github.io/gradebook/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://gradebook-dev.github.io/gradebook/articles/format-policy-file.html","id":"contents-of-a-policy-file","dir":"Articles","previous_headings":"","what":"Contents of a policy file","title":"Format of a Policy File","text":"can see [describe policy file structured.]. details exact specifications policy file, please see [link place code validates schema].","code":""},{"path":"https://gradebook-dev.github.io/gradebook/articles/format-policy-file.html","id":"policy_demo-in-gradebook","dir":"Articles","previous_headings":"","what":"policy_demo in gradebook","title":"Format of a Policy File","text":"gradebook stores sample policy file, policy_demo, can used explore functionality package. policy file one shown top vignette yaml file stored package R list.","code":"library(gradebook) policy_demo #> $coursewide #> $coursewide$course_name #> [1] \"Demo Course\" #>  #> $coursewide$description #> [1] \"This is a demo class dataset to demonstrate the app.\" #>  #>  #> $categories #> $categories[[1]] #> $categories[[1]]$name #> [1] \"Labs\" #>  #> $categories[[1]]$slipdays #> [1] 0 #>  #> $categories[[1]]$late_time1 #> [1] \"00:00:00\" #>  #> $categories[[1]]$late_time2 #> [1] \"00:00:01\" #>  #> $categories[[1]]$late_scale1 #> [1] 1 #>  #> $categories[[1]]$late_scale2 #> [1] 0 #>  #> $categories[[1]]$after #> [1] TRUE #>  #> $categories[[1]]$weight #> [1] 55 #>  #> $categories[[1]]$drops #> [1] 2 #>  #> $categories[[1]]$weighted_method #> [1] \"equally\"   \"by_points\" #>  #> $categories[[1]]$clobber #> [1] \"None\" #>  #> $categories[[1]]$assigns #> [1] \"lab_1\" \"lab_2\" \"lab_3\" \"lab_4\" \"lab_5\" \"lab_6\" #>  #>  #> $categories[[2]] #> $categories[[2]]$name #> [1] \"Discussions\" #>  #> $categories[[2]]$slipdays #> [1] 0 #>  #> $categories[[2]]$late_time1 #> [1] \"00:00:01\" #>  #> $categories[[2]]$late_time2 #> [1] \"00:00:00\" #>  #> $categories[[2]]$late_scale1 #> [1] 1 #>  #> $categories[[2]]$late_scale2 #> [1] 0 #>  #> $categories[[2]]$after #> [1] TRUE #>  #> $categories[[2]]$weight #> [1] 10 #>  #> $categories[[2]]$drops #> [1] 0 #>  #> $categories[[2]]$weighted_method #> [1] \"equally\"   \"by_points\" #>  #> $categories[[2]]$clobber #> [1] \"None\" #>  #> $categories[[2]]$assigns #> [1] \"discussion_1\" \"discussion_2\" #>  #>  #> $categories[[3]] #> $categories[[3]]$name #> [1] \"Midterm\" #>  #> $categories[[3]]$slipdays #> [1] 0 #>  #> $categories[[3]]$late_time1 #> [1] \"00:00:01\" #>  #> $categories[[3]]$late_time2 #> [1] \"00:00:00\" #>  #> $categories[[3]]$late_scale1 #> [1] 1 #>  #> $categories[[3]]$late_scale2 #> [1] 0 #>  #> $categories[[3]]$after #> [1] TRUE #>  #> $categories[[3]]$weight #> [1] 15 #>  #> $categories[[3]]$drops #> [1] 0 #>  #> $categories[[3]]$weighted_method #> [1] \"equally\"   \"by_points\" #>  #> $categories[[3]]$clobber #> [1] \"None\" #>  #> $categories[[3]]$assigns #> [1] \"midterm\" #>  #>  #> $categories[[4]] #> $categories[[4]]$name #> [1] \"Final\" #>  #> $categories[[4]]$slipdays #> [1] 0 #>  #> $categories[[4]]$late_time1 #> [1] \"00:00:01\" #>  #> $categories[[4]]$late_time2 #> [1] \"00:00:00\" #>  #> $categories[[4]]$late_scale1 #> [1] 1 #>  #> $categories[[4]]$late_scale2 #> [1] 0 #>  #> $categories[[4]]$after #> [1] TRUE #>  #> $categories[[4]]$weight #> [1] 20 #>  #> $categories[[4]]$drops #> [1] 0 #>  #> $categories[[4]]$weighted_method #> [1] \"equally\"   \"by_points\" #>  #> $categories[[4]]$clobber #> [1] \"None\" #>  #> $categories[[4]]$assigns #> [1] \"final\" #>  #>  #>  #> $cutoff #> $cutoff$A #> [1] 90 #>  #> $cutoff$B #> [1] 80 #>  #> $cutoff$C #> [1] 70 #>  #> $cutoff$D #> [1] 60 #>  #> $cutoff$F #> [1] 0"},{"path":[]},{"path":"https://gradebook-dev.github.io/gradebook/articles/grade-calculations.html","id":"load-demo-data","dir":"Articles","previous_headings":"Demo of Version B implementation","what":"Load demo data","title":"Grade Calculations","text":"","code":"library(dplyr) library(tidyr) library(gradebook)  policy_nested <- list(     list(category = \"problem_sets\",          aggregation = \"equally_weighted\",          assignments = list(              list(category = \"ps_1\",                   aggregation = \"weighted_by_points\",                   assignments = c(\"ps_1_written\", \"ps_1_code\")),              list(category = \"ps_2\",                   aggregation = \"weighted_by_points\",                   assignments = c(\"ps_2_written\", \"ps_2_code\")))),     list(category = \"exam\",          aggregation = \"none\",          assignments = c(\"final_exam\")))  grades_b <- tibble(student_id = rep(c(4863, 5211, 4893),                                      each = 5),                    assignment = rep(c(\"ps_1_written\",                                        \"ps_1_code\",                                       \"ps_2_written\",                                       \"ps_2_code\",                                       \"final_exam\"), 3),                    pts_earned = c(12, 5, 19, 13, 86,                                   11, 6, 19, 10, 75,                                   8, 8, 10, 13, 92),                    pts_max    = rep(c(15, 10, 20, 16, 100), 3),                    category   = rep(c(\"ps\", \"ps\", \"ps\", \"ps\", \"exam\"), 3),                    subcategory = rep(c(\"ps_1\", \"ps_1\", \"ps_2\", \"ps_2\", \"exam\"), 3))  gs_wide <- grades_b |>     mutate(score = pts_earned / pts_max) |>     pivot_wider(id_cols = student_id,                 names_from = assignment,                 values_from = score) |>     mutate(ps_1_written_max_pts = 15,            ps_1_code_max_pts = 10,            ps_2_written_max_pts = 20,            ps_2_code_max_pts = 16,            final_exam_max_pts = 100)"},{"path":"https://gradebook-dev.github.io/gradebook/articles/grade-calculations.html","id":"calculate-category-grades","dir":"Articles","previous_headings":"Demo of Version B implementation","what":"Calculate category grades","title":"Grade Calculations","text":"","code":"# policy_flat <- policy_nested |> #     gradebook::flatten_policy() #  # gs_wide |> #     get_category_grades(policy_flat)"},{"path":"https://gradebook-dev.github.io/gradebook/articles/grade-calculations.html","id":"original-data","dir":"Articles","previous_headings":"","what":"Original data","title":"Grade Calculations","text":"","code":"# library(tidyverse) # library(future.apply) # plan(multisession)  policy <- list(list(category = \"ps_1\",                     aggregation = \"weighted_by_points\",                     assignments = c(\"ps_1_written\", \"ps_1_code\")),                list(category = \"ps_2\",                     aggregation = \"weighted_by_points\",                     assignments = c(\"ps_2_written\", \"ps_2_code\")),                list(category = \"problem_sets\",                     aggregation = \"equally_weighted\",                     assignments = c(\"ps_1\", \"ps_2\")),                list(category = \"exam\",                     aggregation = \"none\",                     assignments = c(\"final_exam\")))  grades_b <- tibble(student_id = rep(c(4863, 5211, 4893),                                      each = 5),                    assignment = rep(c(\"ps_1_written\",                                        \"ps_1_code\",                                       \"ps_2_written\",                                       \"ps_2_code\",                                       \"final_exam\"), 3),                    pts_earned = c(12, 5, 19, 13, 86,                                   11, 6, 19, 10, 75,                                   8, 8, 10, 13, 92),                    pts_max    = rep(c(15, 10, 20, 16, 100), 3),                    category   = rep(c(\"ps\", \"ps\", \"ps\", \"ps\", \"exam\"), 3),                    subcategory = rep(c(\"ps_1\", \"ps_1\", \"ps_2\", \"ps_2\", \"exam\"), 3))  gs_wide <- grades_b |>     mutate(score = pts_earned / pts_max) |>     pivot_wider(id_cols = student_id,                 names_from = assignment,                 values_from = score) |>     mutate(ps_1_written_max_pts = 15,            ps_1_code_max_pts = 10,            ps_2_written_max_pts = 20,            ps_2_code_max_pts = 16,            final_exam_max_pts = 100) gs_wide"},{"path":[]},{"path":"https://gradebook-dev.github.io/gradebook/articles/grade-calculations.html","id":"vector-versions","dir":"Articles","previous_headings":"Aggregation Functions","what":"Vector Versions","title":"Grade Calculations","text":"","code":"equally_weighted <- function(assignments, weights, n_drops, ...) {      if (n_drops > 0) {assignments[order(assignments)[1:n_drops]] <- NA}      mean(assignments, na.rm =TRUE) }  weighted_by_points <- function(assignments, weights, n_drops, ...) {      if (n_drops > 0) {         drop_idx <- order(assignments)[1:n_drops]         weights[drop_idx] <- NA         assignments[drop_idx] <- NA     }      sum(assignments * (weights / sum(weights, na.rm = TRUE)), na.rm =TRUE) }  max_score <- function(assignments, ...) {     max(assignments) }  min_score <- function(assignments, ...) {     min(assignments) }  none <- function(assignments, ...) {     assignments }"},{"path":"https://gradebook-dev.github.io/gradebook/articles/grade-calculations.html","id":"create-aggregation-functions","dir":"Articles","previous_headings":"","what":"Create aggregation functions","title":"Grade Calculations","text":"","code":"agg_assigns <- function(gs_wide, policy_item) {     get(policy_item$aggregation)(         assignments = gs_wide[policy_item$assignments],         weights = gs_wide[paste0(policy_item$assignments, \"_max_pts\")],         n_drops = ifelse(is.null(policy_item$n_drops), 0, policy_item$n_drops)) }  apply_policy <- function(policy_item, gs_wide) {     gs_wide[[policy_item$category]] <<- apply(gs_wide, 1, agg_assigns, policy_item = policy_item) }"},{"path":[]},{"path":"https://gradebook-dev.github.io/gradebook/articles/grade-calculations.html","id":"version-a-walk-and-apply","dir":"Articles","previous_headings":"Run computations","what":"Version A: Walk and apply","title":"Grade Calculations","text":"Places improvement: Inner apply() can possibly parrallelize. Possibly switching map() family using furrr. Global assignment operator, <<- sketchy use. good can find alternative.","code":"gs_wide_b <- gs_wide gs_wide_c <- gs_wide gs_wide_d <- gs_wide gs_wide_forloop <- gs_wide library(microbenchmark) microbenchmark({     purrr::walk(policy, \\(x) apply_policy(policy_item = x, gs_wide = gs_wide)) })"},{"path":"https://gradebook-dev.github.io/gradebook/articles/grade-calculations.html","id":"version-b-for-loop-over-apply","dir":"Articles","previous_headings":"Run computations","what":"Version B: For loop over apply","title":"Grade Calculations","text":"can tweak previous version get rid <<- using -loop. increases time 3x, probably worth stage game. can come back speed later.","code":"microbenchmark( {     for (policy_item in policy) {     gs_wide_b[[policy_item$category]] <- apply(gs_wide_b, 1, agg_assigns, policy_item = policy_item) } })"},{"path":"https://gradebook-dev.github.io/gradebook/articles/grade-calculations.html","id":"version-c-for-loop-over-a-parallelized-apply","dir":"Articles","previous_headings":"Run computations","what":"Version C: For loop over a parallelized apply","title":"Grade Calculations","text":"construction. attempt speed version B. Use furrr instead future_apply.","code":"microbenchmark( {     for (policy_item in policy) {         gs_wide_c[[policy_item$category]] <- future_apply(gs_wide_c, 1, agg_assigns, policy_item = policy_item)     } })"},{"path":"https://gradebook-dev.github.io/gradebook/articles/grade-calculations.html","id":"version-d-for-loop-over-pmap","dir":"Articles","previous_headings":"Run computations","what":"Version D: For loop over pmap","title":"Grade Calculations","text":"construction: attempt try using pmap inner loop.","code":"agg_assigns <- function(gs_wide, policy_item) {     get(policy_item$aggregation)(         assignments = gs_wide[policy_item$assignments],         weights = gs_wide[paste0(policy_item$assignments, \"_max_pts\")],         n_drops = ifelse(is.null(policy_item$n_drops), 0, policy_item$n_drops)) }  apply_policy <- function(policy_item, gs_wide) {     gs_wide[[policy_item$category]] <- pmap(gs_wide, agg_assigns, policy_item = policy_item) }  weighted_by_points <- function(assignments, weights, n_drops, ...) {      if (n_drops > 0) {         drop_idx <- order(assignments)[1:n_drops]         weights[drop_idx] <- NA         assignments[drop_idx] <- NA     }      rowsum(assignments * (weights / sum(weights, na.rm = TRUE)), na.rm =TRUE) }  pol <- policy[[1]]  gs_wide_d |>     pmap_dbl(weighted_by_points,           assignments = pol$assignments,          weights = paste0(pol$assignments, \"_max_pts\"),          n_drops = 0)"},{"path":"https://gradebook-dev.github.io/gradebook/articles/grade-calculations.html","id":"version-e-naive-double-for-loop","dir":"Articles","previous_headings":"Run computations","what":"Version E: Naive double for loop","title":"Grade Calculations","text":"version doesn’t currently calculate problem_set category correctly, much slower.","code":"microbenchmark({     for(i in 1:length(policy)) {          for(j in 1:nrow(gs_wide_forloop)) {             gs_wide_forloop[j, policy[[i]]$category] <- agg_assigns(policy_item = policy[[i]],                                                               gs_wide_forloop[j,])         }     } })"},{"path":[]},{"path":"https://gradebook-dev.github.io/gradebook/articles/grade-calculations.html","id":"comparison-of-drop-then-reweight-and-reweight-then-drop","dir":"Articles","previous_headings":"Appendix","what":"Comparison of drop then reweight and reweight then drop","title":"Grade Calculations","text":"Looks like drop reweight safer bet - usually gives higher score (easier think ).","code":"assignments <- c(.8, .5, .9) weights <- c(1, 3, .2) n_drops <- 2  normalize_weights <- function(weights) {     weights / sum(weights, na.rm = TRUE) }  # drop first if (n_drops > 0) {     drop_idx <- order(assignments)[1:n_drops]     weights[drop_idx] <- NA     assignments[drop_idx] <- NA }  weights <- normalize_weights(weights) sum(assignments * weights, na.rm =TRUE)  assignments <- c(.8, .5, .9) weights <- c(1, 3, .2)  weights <- normalize_weights(weights) weighted_assignments <- assignments * weights  # drop second if (n_drops > 0) {     drop_idx <- order(weighted_assignments)[1:n_drops]     weights[drop_idx] <- NA     weighted_assignments[drop_idx] <- NA }  sum(weighted_assignments / sum(weights, na.rm = TRUE), na.rm = TRUE)"},{"path":"https://gradebook-dev.github.io/gradebook/articles/gs-demo-walkthrough.html","id":"load-in-student-data","dir":"Articles","previous_headings":"","what":"Load in student data","title":"Example with GS Demo Data","text":"Student data formatted according Gradescope .csv format, unit observation student individual assignment includes student’s score, maximum allowed points, student’s submission timestamp late student submitted (HH:MM:SS format). Gradescope demo data found within package.","code":"gs_demo #> # A tibble: 10 × 44 #>    Names               Email           SID Sections `Lab 1` `Lab 1 - Max Points` #>    <chr>               <chr>         <dbl> <chr>      <dbl>                <dbl> #>  1 Dr. Kadin           Dr.Kadin@be… 3.03e9 fake-cl…       9                   10 #>  2 Bartley Toy         BartleyToy@… 3.03e9 fake-cl…       5                   10 #>  3 Dr. Dontae          Dr.Dontae@b… 3.03e9 fake-cl…      10                   10 #>  4 Narcissus Considine NarcissusCo… 3.03e9 fake-cl…      10                   10 #>  5 Verne Wilderman     VerneWilder… 3.03e9 fake-cl…       8                   10 #>  6 Toivo Witting       ToivoWittin… 3.03e9 fake-cl…       9                   10 #>  7 Tegan Crooks        TeganCrooks… 3.03e9 fake-cl…       8                   10 #>  8 Tyrus Cremin-Wisozk TyrusCremin… 3.03e9 fake-cl…       2                   10 #>  9 Sydni Hansen        SydniHansen… 3.03e9 fake-cl…       8                   10 #> 10 Mrs. Chelsie        Mrs.Chelsie… 3.03e9 fake-cl…       5                   10 #> # ℹ 38 more variables: `Lab 1 - Submission Time` <chr>, #> #   `Lab 1 - Lateness (H:M:S)` <hms>, `Lab 2` <dbl>, #> #   `Lab 2 - Max Points` <dbl>, `Lab 2 - Submission Time` <chr>, #> #   `Lab 2 - Lateness (H:M:S)` <hms>, `Lab 3` <dbl>, #> #   `Lab 3 - Max Points` <dbl>, `Lab 3 - Submission Time` <chr>, #> #   `Lab 3 - Lateness (H:M:S)` <hms>, `Lab 4` <dbl>, #> #   `Lab 4 - Max Points` <dbl>, `Lab 4 - Submission Time` <chr>, …"},{"path":"https://gradebook-dev.github.io/gradebook/articles/gs-demo-walkthrough.html","id":"lower_colnames","dir":"Articles","previous_headings":"","what":"lower_colnames()","title":"Example with GS Demo Data","text":"function changes column names lowercase consistent data processing.","code":"gs_demo |>     lower_colnames() #> # A tibble: 10 × 44 #>    names               email           sid sections `lab 1` `lab 1 - max points` #>    <chr>               <chr>         <dbl> <chr>      <dbl>                <dbl> #>  1 Dr. Kadin           Dr.Kadin@be… 3.03e9 fake-cl…       9                   10 #>  2 Bartley Toy         BartleyToy@… 3.03e9 fake-cl…       5                   10 #>  3 Dr. Dontae          Dr.Dontae@b… 3.03e9 fake-cl…      10                   10 #>  4 Narcissus Considine NarcissusCo… 3.03e9 fake-cl…      10                   10 #>  5 Verne Wilderman     VerneWilder… 3.03e9 fake-cl…       8                   10 #>  6 Toivo Witting       ToivoWittin… 3.03e9 fake-cl…       9                   10 #>  7 Tegan Crooks        TeganCrooks… 3.03e9 fake-cl…       8                   10 #>  8 Tyrus Cremin-Wisozk TyrusCremin… 3.03e9 fake-cl…       2                   10 #>  9 Sydni Hansen        SydniHansen… 3.03e9 fake-cl…       8                   10 #> 10 Mrs. Chelsie        Mrs.Chelsie… 3.03e9 fake-cl…       5                   10 #> # ℹ 38 more variables: `lab 1 - submission time` <chr>, #> #   `lab 1 - lateness (h:m:s)` <hms>, `lab 2` <dbl>, #> #   `lab 2 - max points` <dbl>, `lab 2 - submission time` <chr>, #> #   `lab 2 - lateness (h:m:s)` <hms>, `lab 3` <dbl>, #> #   `lab 3 - max points` <dbl>, `lab 3 - submission time` <chr>, #> #   `lab 3 - lateness (h:m:s)` <hms>, `lab 4` <dbl>, #> #   `lab 4 - max points` <dbl>, `lab 4 - submission time` <chr>, …"},{"path":"https://gradebook-dev.github.io/gradebook/articles/gs-demo-walkthrough.html","id":"check_data_names","dir":"Articles","previous_headings":"","what":"check_data_names()","title":"Example with GS Demo Data","text":"function checks general formatting column names Gradescope data. checks assignments uniformly formatted raw points, maximum points, submission time lateness. also checks first columns Gradescope data include ID columns used identify students, student ID. incorrect formatting, function return relevant error. , function returns dataframe order functions pipeable.","code":"gs_demo |>     lower_colnames() |>     check_data_colnames_format() #> Important Message #> ℹ The ID columns from Gradescope are names, email, sid, and sections #> Important Message #> ℹ The assignments from Gradescope are discussion 1, discussion 2, final, lab 1, lab 2, lab 3, lab 4, lab 5, lab 6, and midterm #> # A tibble: 10 × 44 #>    names               email           sid sections `lab 1` `lab 1 - max points` #>    <chr>               <chr>         <dbl> <chr>      <dbl>                <dbl> #>  1 Dr. Kadin           Dr.Kadin@be… 3.03e9 fake-cl…       9                   10 #>  2 Bartley Toy         BartleyToy@… 3.03e9 fake-cl…       5                   10 #>  3 Dr. Dontae          Dr.Dontae@b… 3.03e9 fake-cl…      10                   10 #>  4 Narcissus Considine NarcissusCo… 3.03e9 fake-cl…      10                   10 #>  5 Verne Wilderman     VerneWilder… 3.03e9 fake-cl…       8                   10 #>  6 Toivo Witting       ToivoWittin… 3.03e9 fake-cl…       9                   10 #>  7 Tegan Crooks        TeganCrooks… 3.03e9 fake-cl…       8                   10 #>  8 Tyrus Cremin-Wisozk TyrusCremin… 3.03e9 fake-cl…       2                   10 #>  9 Sydni Hansen        SydniHansen… 3.03e9 fake-cl…       8                   10 #> 10 Mrs. Chelsie        Mrs.Chelsie… 3.03e9 fake-cl…       5                   10 #> # ℹ 38 more variables: `lab 1 - submission time` <chr>, #> #   `lab 1 - lateness (h:m:s)` <hms>, `lab 2` <dbl>, #> #   `lab 2 - max points` <dbl>, `lab 2 - submission time` <chr>, #> #   `lab 2 - lateness (h:m:s)` <hms>, `lab 3` <dbl>, #> #   `lab 3 - max points` <dbl>, `lab 3 - submission time` <chr>, #> #   `lab 3 - lateness (h:m:s)` <hms>, `lab 4` <dbl>, #> #   `lab 4 - max points` <dbl>, `lab 4 - submission time` <chr>, …"},{"path":"https://gradebook-dev.github.io/gradebook/articles/gs-demo-walkthrough.html","id":"drop_ungraded_assignments","dir":"Articles","previous_headings":"","what":"drop_ungraded_assignments()","title":"Example with GS Demo Data","text":"function drops ungraded assignments. just cut size Gradescope data. removes assignments raw scores NAs every student.","code":"gs_demo |>     lower_colnames() |>     check_data_colnames_format() |>     drop_ungraded_assignments() #> Important Message #> ℹ The ID columns from Gradescope are names, email, sid, and sections #> Important Message #> ℹ The assignments from Gradescope are discussion 1, discussion 2, final, lab 1, lab 2, lab 3, lab 4, lab 5, lab 6, and midterm #> Important Message #> ℹ These are your ungraded assignments:"},{"path":"https://gradebook-dev.github.io/gradebook/articles/gs-demo-walkthrough.html","id":"process_id","dir":"Articles","previous_headings":"","what":"process_id()","title":"Example with GS Demo Data","text":"function drops students missing student IDs merges replicated students based following criteria. assignment cell datetime, removes NAs takes last datetime. assignment cell numeric, takes max. assignment cell NA, leave NA. issues student level, change. processed data returned missing student IDs duplicated students.","code":"gs_demo |>     lower_colnames() |>     check_data_colnames_format() |>     drop_ungraded_assignments() #> Important Message #> ℹ The ID columns from Gradescope are names, email, sid, and sections #> Important Message #> ℹ The assignments from Gradescope are discussion 1, discussion 2, final, lab 1, lab 2, lab 3, lab 4, lab 5, lab 6, and midterm #> Important Message #> ℹ These are your ungraded assignments:    # process_id()"},{"path":"https://gradebook-dev.github.io/gradebook/articles/gs-demo-walkthrough.html","id":"process_assignments","dir":"Articles","previous_headings":"","what":"process_assignments()","title":"Example with GS Demo Data","text":"function removes white spaces special characters column names. cleans column names future processing.","code":"gs_demo |>     lower_colnames() |>     check_data_colnames_format() |>     drop_ungraded_assignments() |>   #  process_id() |>     process_assignments() #> Important Message #> ℹ The ID columns from Gradescope are names, email, sid, and sections #> Important Message #> ℹ The assignments from Gradescope are discussion 1, discussion 2, final, lab 1, lab 2, lab 3, lab 4, lab 5, lab 6, and midterm #> Important Message #> ℹ These are your ungraded assignments: #> # A tibble: 10 × 44 #>    names          email    sid sections `lab_1_-_raw_score` `lab_1_-_max_points` #>    <chr>          <chr>  <dbl> <chr>                  <dbl>                <dbl> #>  1 Dr. Kadin      Dr.K… 3.03e9 fake-cl…                   9                   10 #>  2 Bartley Toy    Bart… 3.03e9 fake-cl…                   5                   10 #>  3 Dr. Dontae     Dr.D… 3.03e9 fake-cl…                  10                   10 #>  4 Narcissus Con… Narc… 3.03e9 fake-cl…                  10                   10 #>  5 Verne Wilderm… Vern… 3.03e9 fake-cl…                   8                   10 #>  6 Toivo Witting  Toiv… 3.03e9 fake-cl…                   9                   10 #>  7 Tegan Crooks   Tega… 3.03e9 fake-cl…                   8                   10 #>  8 Tyrus Cremin-… Tyru… 3.03e9 fake-cl…                   2                   10 #>  9 Sydni Hansen   Sydn… 3.03e9 fake-cl…                   8                   10 #> 10 Mrs. Chelsie   Mrs.… 3.03e9 fake-cl…                   5                   10 #> # ℹ 38 more variables: `lab_1_-_submission_time` <chr>, #> #   `lab_1_-_lateness_(h_m_s)` <hms>, `lab_2_-_raw_score` <dbl>, #> #   `lab_2_-_max_points` <dbl>, `lab_2_-_submission_time` <chr>, #> #   `lab_2_-_lateness_(h_m_s)` <hms>, `lab_3_-_raw_score` <dbl>, #> #   `lab_3_-_max_points` <dbl>, `lab_3_-_submission_time` <chr>, #> #   `lab_3_-_lateness_(h_m_s)` <hms>, `lab_4_-_raw_score` <dbl>, #> #   `lab_4_-_max_points` <dbl>, `lab_4_-_submission_time` <chr>, …"},{"path":"https://gradebook-dev.github.io/gradebook/articles/gs-demo-walkthrough.html","id":"pivot_gs","dir":"Articles","previous_headings":"","what":"pivot_gs()","title":"Example with GS Demo Data","text":"function applies pivot-longer function allow unit observation student + individual assignment.","code":"pivot_df <- gs_demo |>     lower_colnames() |>     check_data_colnames_format() |>     drop_ungraded_assignments() |>    # process_id() |>     process_assignments() |>     pivot_gs() #> Important Message #> ℹ The ID columns from Gradescope are names, email, sid, and sections #> Important Message #> ℹ The assignments from Gradescope are discussion 1, discussion 2, final, lab 1, lab 2, lab 3, lab 4, lab 5, lab 6, and midterm #> Important Message #> ℹ These are your ungraded assignments: #> Important Message #> ℹ The ID columns from Gradescope are names, email, sid, and sections  pivot_df #> # A tibble: 100 × 9 #>    names  email    sid sections assignments raw_score max_points submission_time #>    <chr>  <chr>  <dbl> <chr>    <chr>           <dbl>      <dbl> <chr>           #>  1 Dr. K… Dr.K… 3.03e9 fake-cl… lab_1               9         10 1/19/23 22:20   #>  2 Dr. K… Dr.K… 3.03e9 fake-cl… lab_2               5         20 9/21/22 23:54   #>  3 Dr. K… Dr.K… 3.03e9 fake-cl… lab_3               7         15 1/24/23 20:38   #>  4 Dr. K… Dr.K… 3.03e9 fake-cl… lab_4               9         10 1/26/23 19:51   #>  5 Dr. K… Dr.K… 3.03e9 fake-cl… lab_5               0          5 1/31/23 18:59   #>  6 Dr. K… Dr.K… 3.03e9 fake-cl… lab_6               4         10 2/2/23 12:16    #>  7 Dr. K… Dr.K… 3.03e9 fake-cl… discussion…         4          4 2/7/23 20:53    #>  8 Dr. K… Dr.K… 3.03e9 fake-cl… discussion…         4          4 2/10/23 0:49    #>  9 Dr. K… Dr.K… 3.03e9 fake-cl… midterm            44         50 2/14/23 21:06   #> 10 Dr. K… Dr.K… 3.03e9 fake-cl… final              10        100 1/20/23 15:13   #> # ℹ 90 more rows #> # ℹ 1 more variable: `lateness_(h_m_s)` <chr>"},{"path":"https://gradebook-dev.github.io/gradebook/articles/gs-demo-walkthrough.html","id":"load-in-policy-file","dir":"Articles","previous_headings":"","what":"Load in policy file","title":"Example with GS Demo Data","text":"policy file broken three separate parts: coursewide information, categories cutoffs. Coursewide information includes course name course description; purely user. category subset overall grade includes information scores assignments within category aggregated: information includes lateness penalties, assignments weighted within category categories weighted overall grade. Finally, cutoffs describe lower cutoff letter grade. example, cutoff “” 90, student earns “” overall grade least 90%. demo policy file found within package.","code":"policy_demo #> $coursewide #> $coursewide$course_name #> [1] \"Demo Course\" #>  #> $coursewide$description #> [1] \"This is a demo class dataset to demonstrate the app.\" #>  #>  #> $categories #> $categories[[1]] #> $categories[[1]]$name #> [1] \"Labs\" #>  #> $categories[[1]]$slipdays #> [1] 0 #>  #> $categories[[1]]$late_time1 #> [1] \"00:00:00\" #>  #> $categories[[1]]$late_time2 #> [1] \"00:00:01\" #>  #> $categories[[1]]$late_scale1 #> [1] 1 #>  #> $categories[[1]]$late_scale2 #> [1] 0 #>  #> $categories[[1]]$after #> [1] TRUE #>  #> $categories[[1]]$weight #> [1] 55 #>  #> $categories[[1]]$drops #> [1] 2 #>  #> $categories[[1]]$weighted_method #> [1] \"equally\"   \"by_points\" #>  #> $categories[[1]]$clobber #> [1] \"None\" #>  #> $categories[[1]]$assigns #> [1] \"lab_1\" \"lab_2\" \"lab_3\" \"lab_4\" \"lab_5\" \"lab_6\" #>  #>  #> $categories[[2]] #> $categories[[2]]$name #> [1] \"Discussions\" #>  #> $categories[[2]]$slipdays #> [1] 0 #>  #> $categories[[2]]$late_time1 #> [1] \"00:00:01\" #>  #> $categories[[2]]$late_time2 #> [1] \"00:00:00\" #>  #> $categories[[2]]$late_scale1 #> [1] 1 #>  #> $categories[[2]]$late_scale2 #> [1] 0 #>  #> $categories[[2]]$after #> [1] TRUE #>  #> $categories[[2]]$weight #> [1] 10 #>  #> $categories[[2]]$drops #> [1] 0 #>  #> $categories[[2]]$weighted_method #> [1] \"equally\"   \"by_points\" #>  #> $categories[[2]]$clobber #> [1] \"None\" #>  #> $categories[[2]]$assigns #> [1] \"discussion_1\" \"discussion_2\" #>  #>  #> $categories[[3]] #> $categories[[3]]$name #> [1] \"Midterm\" #>  #> $categories[[3]]$slipdays #> [1] 0 #>  #> $categories[[3]]$late_time1 #> [1] \"00:00:01\" #>  #> $categories[[3]]$late_time2 #> [1] \"00:00:00\" #>  #> $categories[[3]]$late_scale1 #> [1] 1 #>  #> $categories[[3]]$late_scale2 #> [1] 0 #>  #> $categories[[3]]$after #> [1] TRUE #>  #> $categories[[3]]$weight #> [1] 15 #>  #> $categories[[3]]$drops #> [1] 0 #>  #> $categories[[3]]$weighted_method #> [1] \"equally\"   \"by_points\" #>  #> $categories[[3]]$clobber #> [1] \"None\" #>  #> $categories[[3]]$assigns #> [1] \"midterm\" #>  #>  #> $categories[[4]] #> $categories[[4]]$name #> [1] \"Final\" #>  #> $categories[[4]]$slipdays #> [1] 0 #>  #> $categories[[4]]$late_time1 #> [1] \"00:00:01\" #>  #> $categories[[4]]$late_time2 #> [1] \"00:00:00\" #>  #> $categories[[4]]$late_scale1 #> [1] 1 #>  #> $categories[[4]]$late_scale2 #> [1] 0 #>  #> $categories[[4]]$after #> [1] TRUE #>  #> $categories[[4]]$weight #> [1] 20 #>  #> $categories[[4]]$drops #> [1] 0 #>  #> $categories[[4]]$weighted_method #> [1] \"equally\"   \"by_points\" #>  #> $categories[[4]]$clobber #> [1] \"None\" #>  #> $categories[[4]]$assigns #> [1] \"final\" #>  #>  #>  #> $cutoff #> $cutoff$A #> [1] 90 #>  #> $cutoff$B #> [1] 80 #>  #> $cutoff$C #> [1] 70 #>  #> $cutoff$D #> [1] 60 #>  #> $cutoff$F #> [1] 0"},{"path":"https://gradebook-dev.github.io/gradebook/articles/gs-demo-walkthrough.html","id":"creating-a-policy-file","dir":"Articles","previous_headings":"","what":"Creating a Policy File","title":"Example with GS Demo Data","text":"empty policy file can created create_empty_policy_file() function, takes single numeric input specify many categories policy file . function defaults just one category. returns list correct policy-file formatting default values inputs.","code":"create_empty_policy_file(num_cat = 2) #> $coursewide #> $coursewide$course_name #> [1] \"Course Name\" #>  #> $coursewide$description #> [1] \"cours description\" #>  #>  #> $categories #> $categories[[1]] #> $categories[[1]]$name #> [1] \"Category 1\" #>  #> $categories[[1]]$slipdays #> [1] 0 #>  #> $categories[[1]]$late_time1 #> [1] \"00:00:00\" #>  #> $categories[[1]]$late_time2 #> [1] \"00:00:00\" #>  #> $categories[[1]]$late_scale1 #> [1] 1 #>  #> $categories[[1]]$late_scale2 #> [1] 0 #>  #> $categories[[1]]$after #> [1] TRUE #>  #> $categories[[1]]$weight #> [1] 0 #>  #> $categories[[1]]$drops #> [1] 0 #>  #> $categories[[1]]$weighted_method #> [1] \"equally\"   \"by_points\" #>  #> $categories[[1]]$clobber #> [1] \"None\" #>  #> $categories[[1]]$assigns #> NULL #>  #>  #> $categories[[2]] #> $categories[[2]]$name #> [1] \"Category 2\" #>  #> $categories[[2]]$slipdays #> [1] 0 #>  #> $categories[[2]]$late_time1 #> [1] \"00:00:00\" #>  #> $categories[[2]]$late_time2 #> [1] \"00:00:00\" #>  #> $categories[[2]]$late_scale1 #> [1] 1 #>  #> $categories[[2]]$late_scale2 #> [1] 0 #>  #> $categories[[2]]$after #> [1] TRUE #>  #> $categories[[2]]$weight #> [1] 0 #>  #> $categories[[2]]$drops #> [1] 0 #>  #> $categories[[2]]$weighted_method #> [1] \"equally\"   \"by_points\" #>  #> $categories[[2]]$clobber #> [1] \"None\" #>  #> $categories[[2]]$assigns #> NULL #>  #>  #>  #> $cutoff #> $cutoff$A #> [1] 90 #>  #> $cutoff$B #> [1] 80 #>  #> $cutoff$C #> [1] 70 #>  #> $cutoff$D #> [1] 60 #>  #> $cutoff$F #> [1] 0"},{"path":"https://gradebook-dev.github.io/gradebook/articles/gs-demo-walkthrough.html","id":"check_names","dir":"Articles","previous_headings":"","what":"check_names()","title":"Example with GS Demo Data","text":"function validates policy file right format terms names nesting. incorrect formatting, returns error information formatting missing. policy file correctly formatted, returns policy file order make functions pipeable.","code":"policy_demo|>     check_names() #> $coursewide #> $coursewide$course_name #> [1] \"Demo Course\" #>  #> $coursewide$description #> [1] \"This is a demo class dataset to demonstrate the app.\" #>  #>  #> $categories #> $categories[[1]] #> $categories[[1]]$name #> [1] \"Labs\" #>  #> $categories[[1]]$slipdays #> [1] 0 #>  #> $categories[[1]]$late_time1 #> [1] \"00:00:00\" #>  #> $categories[[1]]$late_time2 #> [1] \"00:00:01\" #>  #> $categories[[1]]$late_scale1 #> [1] 1 #>  #> $categories[[1]]$late_scale2 #> [1] 0 #>  #> $categories[[1]]$after #> [1] TRUE #>  #> $categories[[1]]$weight #> [1] 55 #>  #> $categories[[1]]$drops #> [1] 2 #>  #> $categories[[1]]$weighted_method #> [1] \"equally\"   \"by_points\" #>  #> $categories[[1]]$clobber #> [1] \"None\" #>  #> $categories[[1]]$assigns #> [1] \"lab_1\" \"lab_2\" \"lab_3\" \"lab_4\" \"lab_5\" \"lab_6\" #>  #>  #> $categories[[2]] #> $categories[[2]]$name #> [1] \"Discussions\" #>  #> $categories[[2]]$slipdays #> [1] 0 #>  #> $categories[[2]]$late_time1 #> [1] \"00:00:01\" #>  #> $categories[[2]]$late_time2 #> [1] \"00:00:00\" #>  #> $categories[[2]]$late_scale1 #> [1] 1 #>  #> $categories[[2]]$late_scale2 #> [1] 0 #>  #> $categories[[2]]$after #> [1] TRUE #>  #> $categories[[2]]$weight #> [1] 10 #>  #> $categories[[2]]$drops #> [1] 0 #>  #> $categories[[2]]$weighted_method #> [1] \"equally\"   \"by_points\" #>  #> $categories[[2]]$clobber #> [1] \"None\" #>  #> $categories[[2]]$assigns #> [1] \"discussion_1\" \"discussion_2\" #>  #>  #> $categories[[3]] #> $categories[[3]]$name #> [1] \"Midterm\" #>  #> $categories[[3]]$slipdays #> [1] 0 #>  #> $categories[[3]]$late_time1 #> [1] \"00:00:01\" #>  #> $categories[[3]]$late_time2 #> [1] \"00:00:00\" #>  #> $categories[[3]]$late_scale1 #> [1] 1 #>  #> $categories[[3]]$late_scale2 #> [1] 0 #>  #> $categories[[3]]$after #> [1] TRUE #>  #> $categories[[3]]$weight #> [1] 15 #>  #> $categories[[3]]$drops #> [1] 0 #>  #> $categories[[3]]$weighted_method #> [1] \"equally\"   \"by_points\" #>  #> $categories[[3]]$clobber #> [1] \"None\" #>  #> $categories[[3]]$assigns #> [1] \"midterm\" #>  #>  #> $categories[[4]] #> $categories[[4]]$name #> [1] \"Final\" #>  #> $categories[[4]]$slipdays #> [1] 0 #>  #> $categories[[4]]$late_time1 #> [1] \"00:00:01\" #>  #> $categories[[4]]$late_time2 #> [1] \"00:00:00\" #>  #> $categories[[4]]$late_scale1 #> [1] 1 #>  #> $categories[[4]]$late_scale2 #> [1] 0 #>  #> $categories[[4]]$after #> [1] TRUE #>  #> $categories[[4]]$weight #> [1] 20 #>  #> $categories[[4]]$drops #> [1] 0 #>  #> $categories[[4]]$weighted_method #> [1] \"equally\"   \"by_points\" #>  #> $categories[[4]]$clobber #> [1] \"None\" #>  #> $categories[[4]]$assigns #> [1] \"final\" #>  #>  #>  #> $cutoff #> $cutoff$A #> [1] 90 #>  #> $cutoff$B #> [1] 80 #>  #> $cutoff$C #> [1] 70 #>  #> $cutoff$D #> [1] 60 #>  #> $cutoff$F #> [1] 0"},{"path":"https://gradebook-dev.github.io/gradebook/articles/gs-demo-walkthrough.html","id":"check_assignment_names","dir":"Articles","previous_headings":"","what":"check_assignment_names()","title":"Example with GS Demo Data","text":"function checks assignments within policy file can found within Gradescope data. assignment policy file occur Gradescope data, error returned, including assignments student data. error, policy file return keep functions pipeable. part process done validating Gradescope data converting pivotted format pivot_gs() pipline explained demonstrated . example, pivot_df pivotted result gs_demo going thorugh pipeline.","code":"policy_demo |>     check_names()|>     check_assignment_names(pivot_df = pivot_df) #> $coursewide #> $coursewide$course_name #> [1] \"Demo Course\" #>  #> $coursewide$description #> [1] \"This is a demo class dataset to demonstrate the app.\" #>  #>  #> $categories #> $categories[[1]] #> $categories[[1]]$name #> [1] \"Labs\" #>  #> $categories[[1]]$slipdays #> [1] 0 #>  #> $categories[[1]]$late_time1 #> [1] \"00:00:00\" #>  #> $categories[[1]]$late_time2 #> [1] \"00:00:01\" #>  #> $categories[[1]]$late_scale1 #> [1] 1 #>  #> $categories[[1]]$late_scale2 #> [1] 0 #>  #> $categories[[1]]$after #> [1] TRUE #>  #> $categories[[1]]$weight #> [1] 55 #>  #> $categories[[1]]$drops #> [1] 2 #>  #> $categories[[1]]$weighted_method #> [1] \"equally\"   \"by_points\" #>  #> $categories[[1]]$clobber #> [1] \"None\" #>  #> $categories[[1]]$assigns #> [1] \"lab_1\" \"lab_2\" \"lab_3\" \"lab_4\" \"lab_5\" \"lab_6\" #>  #>  #> $categories[[2]] #> $categories[[2]]$name #> [1] \"Discussions\" #>  #> $categories[[2]]$slipdays #> [1] 0 #>  #> $categories[[2]]$late_time1 #> [1] \"00:00:01\" #>  #> $categories[[2]]$late_time2 #> [1] \"00:00:00\" #>  #> $categories[[2]]$late_scale1 #> [1] 1 #>  #> $categories[[2]]$late_scale2 #> [1] 0 #>  #> $categories[[2]]$after #> [1] TRUE #>  #> $categories[[2]]$weight #> [1] 10 #>  #> $categories[[2]]$drops #> [1] 0 #>  #> $categories[[2]]$weighted_method #> [1] \"equally\"   \"by_points\" #>  #> $categories[[2]]$clobber #> [1] \"None\" #>  #> $categories[[2]]$assigns #> [1] \"discussion_1\" \"discussion_2\" #>  #>  #> $categories[[3]] #> $categories[[3]]$name #> [1] \"Midterm\" #>  #> $categories[[3]]$slipdays #> [1] 0 #>  #> $categories[[3]]$late_time1 #> [1] \"00:00:01\" #>  #> $categories[[3]]$late_time2 #> [1] \"00:00:00\" #>  #> $categories[[3]]$late_scale1 #> [1] 1 #>  #> $categories[[3]]$late_scale2 #> [1] 0 #>  #> $categories[[3]]$after #> [1] TRUE #>  #> $categories[[3]]$weight #> [1] 15 #>  #> $categories[[3]]$drops #> [1] 0 #>  #> $categories[[3]]$weighted_method #> [1] \"equally\"   \"by_points\" #>  #> $categories[[3]]$clobber #> [1] \"None\" #>  #> $categories[[3]]$assigns #> [1] \"midterm\" #>  #>  #> $categories[[4]] #> $categories[[4]]$name #> [1] \"Final\" #>  #> $categories[[4]]$slipdays #> [1] 0 #>  #> $categories[[4]]$late_time1 #> [1] \"00:00:01\" #>  #> $categories[[4]]$late_time2 #> [1] \"00:00:00\" #>  #> $categories[[4]]$late_scale1 #> [1] 1 #>  #> $categories[[4]]$late_scale2 #> [1] 0 #>  #> $categories[[4]]$after #> [1] TRUE #>  #> $categories[[4]]$weight #> [1] 20 #>  #> $categories[[4]]$drops #> [1] 0 #>  #> $categories[[4]]$weighted_method #> [1] \"equally\"   \"by_points\" #>  #> $categories[[4]]$clobber #> [1] \"None\" #>  #> $categories[[4]]$assigns #> [1] \"final\" #>  #>  #>  #> $cutoff #> $cutoff$A #> [1] 90 #>  #> $cutoff$B #> [1] 80 #>  #> $cutoff$C #> [1] 70 #>  #> $cutoff$D #> [1] 60 #>  #> $cutoff$F #> [1] 0"},{"path":"https://gradebook-dev.github.io/gradebook/articles/gs-demo-walkthrough.html","id":"create_assigns_table","dir":"Articles","previous_headings":"","what":"create_assigns_table()","title":"Example with GS Demo Data","text":"function creates assignment table row assignment relevant category information. intermediary table makes easier combine information policy file pivoted data Gradescope data.","code":"policy_demo|>     check_names()|>     check_assignment_names(pivot_df = pivot_df) |>     create_assigns_table() #>     assignments    category slipdays late_time1 late_time2 late_scale1 #> 1         lab_1        Labs        0   00:00:00   00:00:01           1 #> 2         lab_2        Labs        0   00:00:00   00:00:01           1 #> 3         lab_3        Labs        0   00:00:00   00:00:01           1 #> 4         lab_4        Labs        0   00:00:00   00:00:01           1 #> 5         lab_5        Labs        0   00:00:00   00:00:01           1 #> 6         lab_6        Labs        0   00:00:00   00:00:01           1 #> 7  discussion_1 Discussions        0   00:00:01   00:00:00           1 #> 8  discussion_2 Discussions        0   00:00:01   00:00:00           1 #> 9       midterm     Midterm        0   00:00:01   00:00:00           1 #> 10        final       Final        0   00:00:01   00:00:00           1 #>    late_scale2 after weights drops weighted_method clobber #> 1            0  TRUE      55     2         equally    None #> 2            0  TRUE      55     2         equally    None #> 3            0  TRUE      55     2         equally    None #> 4            0  TRUE      55     2         equally    None #> 5            0  TRUE      55     2         equally    None #> 6            0  TRUE      55     2         equally    None #> 7            0  TRUE      10     0       by_points    None #> 8            0  TRUE      10     0       by_points    None #> 9            0  TRUE      15     0         equally    None #> 10           0  TRUE      20     0       by_points    None"},{"path":"https://gradebook-dev.github.io/gradebook/articles/gs-demo-walkthrough.html","id":"data_merge_assigns","dir":"Articles","previous_headings":"","what":"data_merge_assigns()","title":"Example with GS Demo Data","text":"function combines grading criteria policy file student-assignment data Gradescope data, now pivotted form. point, resulting dataframe’s unit observation student’s individual assignment. row includes student’s scores lateness information well information assignment’s grading criteria based respective category. purpose combining two original inputs – Gradescope data policy file – allow following grading computations utilize one merged file.","code":"policy_demo|>     check_names()|>     check_assignment_names(pivot_df = pivot_df) |>     create_assigns_table() |>     data_merge_assigns(pivot_df = pivot_df) #> # A tibble: 100 × 20 #>    names  email    sid sections assignments raw_score max_points submission_time #>    <chr>  <chr>  <dbl> <chr>    <chr>           <dbl>      <dbl> <chr>           #>  1 Dr. K… Dr.K… 3.03e9 fake-cl… lab_1               9         10 1/19/23 22:20   #>  2 Dr. K… Dr.K… 3.03e9 fake-cl… lab_2               5         20 9/21/22 23:54   #>  3 Dr. K… Dr.K… 3.03e9 fake-cl… lab_3               7         15 1/24/23 20:38   #>  4 Dr. K… Dr.K… 3.03e9 fake-cl… lab_4               9         10 1/26/23 19:51   #>  5 Dr. K… Dr.K… 3.03e9 fake-cl… lab_5               0          5 1/31/23 18:59   #>  6 Dr. K… Dr.K… 3.03e9 fake-cl… lab_6               4         10 2/2/23 12:16    #>  7 Dr. K… Dr.K… 3.03e9 fake-cl… discussion…         4          4 2/7/23 20:53    #>  8 Dr. K… Dr.K… 3.03e9 fake-cl… discussion…         4          4 2/10/23 0:49    #>  9 Dr. K… Dr.K… 3.03e9 fake-cl… midterm            44         50 2/14/23 21:06   #> 10 Dr. K… Dr.K… 3.03e9 fake-cl… final              10        100 1/20/23 15:13   #> # ℹ 90 more rows #> # ℹ 12 more variables: `lateness_(h_m_s)` <chr>, category <chr>, #> #   slipdays <dbl>, late_time1 <chr>, late_time2 <chr>, late_scale1 <dbl>, #> #   late_scale2 <dbl>, after <lgl>, weights <dbl>, drops <dbl>, #> #   weighted_method <chr>, clobber <chr>"},{"path":"https://gradebook-dev.github.io/gradebook/articles/gs-demo-walkthrough.html","id":"grading","dir":"Articles","previous_headings":"","what":"Grading","title":"Example with GS Demo Data","text":"TBD","code":""},{"path":"https://gradebook-dev.github.io/gradebook/articles/nested-group_bys.html","id":"definitions","dir":"Articles","previous_headings":"","what":"Definitions","title":"How to implement nested grouped operations?","text":"Category set assignments /categories along aggregation function. Aggregation can include number drops lateness penalty. Front end aggregation functions: Equal weights total points Min Max","code":""},{"path":"https://gradebook-dev.github.io/gradebook/articles/nested-group_bys.html","id":"the-demo-data-set","dir":"Articles","previous_headings":"","what":"The demo data set","title":"How to implement nested grouped operations?","text":"","code":"library(dplyr)  grades_a <- tibble(student_id = rep(c(\"4863\", \"5211\", \"4893\"), each = 3),                    assignment = rep(c(\"ps_1\", \"ps_2\", \"exam\"), 3),                    pts_earned = c(17, 32, 86,                                   17, 29, 75,                                   16, 23, 92),                    pts_max    = rep(c(25, 36, 100), 3),                    category   = rep(c(\"ps\", \"ps\", \"exam\"), 3)) grades_a #> # A tibble: 9 × 5 #>   student_id assignment pts_earned pts_max category #>   <chr>      <chr>           <dbl>   <dbl> <chr>    #> 1 4863       ps_1               17      25 ps       #> 2 4863       ps_2               32      36 ps       #> 3 4863       exam               86     100 exam     #> 4 5211       ps_1               17      25 ps       #> 5 5211       ps_2               29      36 ps       #> 6 5211       exam               75     100 exam     #> 7 4893       ps_1               16      25 ps       #> 8 4893       ps_2               23      36 ps       #> 9 4893       exam               92     100 exam # policy a course_grade:   aggregation:     weights: even     drops: 0      lateness: etc...   categories:     exams:       aggregation: mean       assignments:         - exam     ps:       aggregation: mean       assignments:         - ps_1_written         - ps_1_code         - ps_2_written         - ps_2_code grades_b <- tibble(student_id = rep(c(\"4863\", \"5211\", \"4893\"), each = 5),                    assignment = rep(c(\"ps_1_written\",                                        \"ps_1_code\",                                       \"ps_2_written\",                                       \"ps_2_code\",                                       \"exam\"), 3),                    pts_earned = c(12, 5, 19, 13, 86,                                   11, 6, 19, 10, 75,                                   8, 8, 10, 13, 92),                    pts_max    = rep(c(15, 10, 20, 16, 100), 3),                    category   = rep(c(\"ps\", \"ps\", \"ps\", \"ps\", \"exam\"), 3),                    subcategory = rep(c(\"ps_1\", \"ps_1\", \"ps_2\", \"ps_2\", \"exam\"), 3)) grades_b #> # A tibble: 15 × 6 #>    student_id assignment   pts_earned pts_max category subcategory #>    <chr>      <chr>             <dbl>   <dbl> <chr>    <chr>       #>  1 4863       ps_1_written         12      15 ps       ps_1        #>  2 4863       ps_1_code             5      10 ps       ps_1        #>  3 4863       ps_2_written         19      20 ps       ps_2        #>  4 4863       ps_2_code            13      16 ps       ps_2        #>  5 4863       exam                 86     100 exam     exam        #>  6 5211       ps_1_written         11      15 ps       ps_1        #>  7 5211       ps_1_code             6      10 ps       ps_1        #>  8 5211       ps_2_written         19      20 ps       ps_2        #>  9 5211       ps_2_code            10      16 ps       ps_2        #> 10 5211       exam                 75     100 exam     exam        #> 11 4893       ps_1_written          8      15 ps       ps_1        #> 12 4893       ps_1_code             8      10 ps       ps_1        #> 13 4893       ps_2_written         10      20 ps       ps_2        #> 14 4893       ps_2_code            13      16 ps       ps_2        #> 15 4893       exam                 92     100 exam     exam # policy b categories:   aggregation: mean   exams:     aggregation: mean     assignments:       - exam   ps:     aggregation: mean     categories:       ps_1:         aggregation: by points         assignments:           - ps_1_written           - ps_1_code       ps_2:         aggregation: by points         assignments:           - ps_2_written           - ps_2_code # policy b take 2 categories:   exams:     assignments:       - exam   ps:     categories:       agg: equally weighted       ps_1:         agg: by points         assignments:           - ps_1_written           - ps_1_code       ps_2:         agg: by points         assignments:           - ps_2_written           - ps_2_code quiz:   agg: equally weighted   assignments:     - name: quiz 1       agg: equally weighted       assignments:         - name: ind quiz           agg: max           assignments:             - ind version a             - ind version b             - ind version c             - ind version d         - name: group quiz           agg: max           assignments:             - group version a             - group version b             - group version c             - group version d     - name: quiz 2       agg: equally weighted       assignments:         - name: ind quiz           agg: max           assignments:             - ind version a             - ind version b             - ind version c             - ind version d         - name: group quiz           agg: max           assignments:             - group version a             - group version b             - group version c             - group version d"},{"path":[]},{"path":"https://gradebook-dev.github.io/gradebook/articles/nested-group_bys.html","id":"i--hardcode-scores","dir":"Articles","previous_headings":"Policy A","what":"I. Hardcode scores","title":"How to implement nested grouped operations?","text":"","code":"grades_a |>     mutate(score = pts_earned / pts_max) |>     group_by(student_id, category) |>     summarize(cat_score = mean(score)) |>     summarize(course_grade = mean(cat_score)) #> `summarise()` has grouped output by 'student_id'. You can override using the #> `.groups` argument. #> # A tibble: 3 × 2 #>   student_id course_grade #>   <chr>             <dbl> #> 1 4863              0.822 #> 2 4893              0.780 #> 3 5211              0.746"},{"path":[]},{"path":"https://gradebook-dev.github.io/gradebook/articles/nested-group_bys.html","id":"i--hardcode-scores-1","dir":"Articles","previous_headings":"Policy B","what":"I. Hardcode scores","title":"How to implement nested grouped operations?","text":"","code":"grades_b |>     group_by(student_id, category, subcategory) |>     summarize(tot_earned = sum(pts_earned),               tot_max    = sum(pts_max)) |>     ungroup() |>     mutate(score = tot_earned / tot_max) |>     group_by(student_id, category) |>     summarize(cat_score = mean(score)) |>     summarize(course_grade = mean(cat_score)) #> `summarise()` has grouped output by 'student_id', 'category'. You can override #> using the `.groups` argument. #> `summarise()` has grouped output by 'student_id'. You can override using the #> `.groups` argument. #> # A tibble: 3 × 2 #>   student_id course_grade #>   <chr>             <dbl> #> 1 4863              0.822 #> 2 4893              0.780 #> 3 5211              0.746"},{"path":"https://gradebook-dev.github.io/gradebook/articles/nested-group_bys.html","id":"questions","dir":"Articles","previous_headings":"","what":"Questions","title":"How to implement nested grouped operations?","text":"Can made general replacing mutate() step inclusion weights column aggregations just weighted sums? represent subcategories data frame category-specific? E.g. exam category subcategory? NA, won’t lumped NA group_by? approach pulling categories list (ragged array) appending grades data frame (square array). work better effectively take scores data frame append list? Said another way, using dplyr functions like group_by() summarize(), purrr functions like group_map(), nest() tidyr?","code":""},{"path":"https://gradebook-dev.github.io/gradebook/articles/nested-group_bys.html","id":"second-try","dir":"Articles","previous_headings":"","what":"Second Try","title":"How to implement nested grouped operations?","text":"attempt solving nested categories things. example, consider simple nested policy: idea : Keeping grade data wide instead tall form, post-lateness grade every assignment can found column. Set map iterate list every category subcategory starting leaves tree. Essentially like : operation want enable something like : Note won’t quite work written. mutate() wants column-wise operations, mean(), example, won’t work intended. ’s possible dplyr::rowwise() solution (’d start pipe ). map something like (forget map syntax): ’m quite sure get output given iteration accessible next iteration (ps_1 can get passed ps), general idea just tack columns onto right side gs_wide. conversions need happen sure bits data policy file passed appropriate things (name, function, data frame, column names). package rlang helpful .","code":"categories:   - category: exam     aggregation: mean     assignments:       - final exam   - category: problem sets     aggregation: mean     assignments:       - category: ps-1         aggregation: by points         assignments:           - ps_1_written           - ps_1_code       - category: ps-2         aggregation: by points         assignments:           - ps_2_written           - ps_2_code - category: ps_1   aggregation: by_points   assignments:     - ps_1_written     - ps_1_code - category: ps_2   aggregation: by_points   assignments:     - ps_2_written     - ps_2_code - category: problem_sets   aggregation: mean   assignments:     - ps_1     - ps_2 - category: exam   aggregation: mean   assignments:     - final_exam gs_data |>   mutate(ps_1 = by_points(ps_1_written, ps_1_code)) |>   mutate(ps_2 = by_points(ps_2_written, ps_2_code)) |>   mutate(problem_sets = mean(ps_1, ps2)) |>   mutate(exam = mean(final_exam)) |>   mutate(course_grade = weighted_sum(problem_sets, weights)) map(policy_list, mutate(x$category = x$aggregation(gs_wide, cols = x$assignments))) # library(tidyr) # policy <- list(list(category = \"ps_1\", #                     aggregation = \"sum\", #                     assignments = c(\"ps_1_written\", \"ps_1_code\")), #                list(category = \"ps_2\", #                     aggregation = \"sum\", #                     assignments = c(\"ps_2_written\", \"ps_2_code\")), #                list(category = \"problem-sets\", #                     aggregation = \"mean\", #                     assignments = c(\"ps_2\", \"ps_2\")), #                list(category = \"exam\", #                     aggregation = \"mean\", #                     assignments = c(\"final_exam\"))) #  # grades_b <- tibble(student_id = rep(c(\"4863\", \"5211\", \"4893\"),  #                                     each = 5), #                    assignment = rep(c(\"ps_1_written\",  #                                       \"ps_1_code\", #                                       \"ps_2_written\", #                                       \"ps_2_code\", #                                       \"final_exam\"), 3), #                    pts_earned = c(12, 5, 19, 13, 86, #                                   11, 6, 19, 10, 75, #                                   8, 8, 10, 13, 92), #                    pts_max    = rep(c(15, 10, 20, 16, 100), 3), #                    category   = rep(c(\"ps\", \"ps\", \"ps\", \"ps\", \"exam\"), 3), #                    subcategory = rep(c(\"ps_1\", \"ps_1\", \"ps_2\", \"ps_2\", \"exam\"), 3)) #  # gs_wide <- grades_b |> #     mutate(score = pts_earned / pts_max) |> #     pivot_wider(id_cols = student_id, #                 names_from = assignment, #                 values_from = score) #  # pol1 <- policy[[1]] #  #  # agg_assigns <- function(pol1, gs_wide) { #     gs_wide[[pol1$category]] = get(pol1$aggregation)(pol1$assignments) # } #  # gs_wide |> #     purrr::map(agg_assigns) #  # library(glue) # gs_wide |> #     rowwise() |> #     mutate(get(pol1$aggregation)(!!!rlang::syms(pol1$assignments)))"},{"path":"https://gradebook-dev.github.io/gradebook/articles/work_flow.html","id":"category-vs-assignments","dir":"Articles","previous_headings":"","what":"Category vs Assignments","title":"General Work Flow","text":"Description .","code":""},{"path":"https://gradebook-dev.github.io/gradebook/articles/work_flow.html","id":"user-input","dir":"Articles","previous_headings":"","what":"User Input","title":"General Work Flow","text":"Description .","code":""},{"path":"https://gradebook-dev.github.io/gradebook/articles/work_flow.html","id":"grading","dir":"Articles","previous_headings":"","what":"Grading","title":"General Work Flow","text":"Description .","code":""},{"path":"https://gradebook-dev.github.io/gradebook/articles/work_flow.html","id":"summaries-and-distributions","dir":"Articles","previous_headings":"","what":"Summaries and Distributions","title":"General Work Flow","text":"Description .","code":""},{"path":"https://gradebook-dev.github.io/gradebook/articles/work_flow.html","id":"coming-soon-","dir":"Articles","previous_headings":"","what":"Coming soon.","title":"General Work Flow","text":"Slip days Aggregated Assignments","code":""},{"path":"https://gradebook-dev.github.io/gradebook/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nikita Jayaprakash. Author, maintainer. Monika Voutov. Author. Andrew Bray. Author.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jayaprakash N, Voutov M, Bray (2023). gradebook: Calculate course grades based assignment scores Gradescope description course grading policy.. R package version 0.0.0.9000, https://github.com/gradebook-dev/gradebook.","code":"@Manual{,   title = {gradebook: Calculate course grades based on assignment scores from Gradescope and a description of the course grading policy.},   author = {Nikita Jayaprakash and Monika Voutov and Andrew Bray},   year = {2023},   note = {R package version 0.0.0.9000},   url = {https://github.com/gradebook-dev/gradebook}, }"},{"path":"https://gradebook-dev.github.io/gradebook/index.html","id":"gradebook","dir":"","previous_headings":"","what":"Calculate course grades based on assignment scores from Gradescope and a description of the course grading policy.","title":"Calculate course grades based on assignment scores from Gradescope and a description of the course grading policy.","text":"system make course grade calculations easy, fast, importantly, correct. Course grades produced data frame assignment grades along grading policy file specifies weighted combined final grade. package active development used calculate course grades.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/by_max.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Grade by Maximum Score in Category — by_max","title":"Calculate Grade by Maximum Score in Category — by_max","text":"functions calculates grade category maximum percentage score category. max points new category given average max points assignments within category.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/by_max.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Grade by Maximum Score in Category — by_max","text":"","code":"by_max(gs_data, sub_category, sub_assigns)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/by_max.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Grade by Maximum Score in Category — by_max","text":"gs_data wide formatted, processed Gradescope data sub_category name sub-category grade calculated sub_assigns assignments within subcategory","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/by_max.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Grade by Maximum Score in Category — by_max","text":"wide formatted dataframe raw score, max points percent new subcategory","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/by_none.html","id":null,"dir":"Reference","previous_headings":"","what":"No Grading Policy Function — by_none","title":"No Grading Policy Function — by_none","text":"function used placeholder function grading policy.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/by_none.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"No Grading Policy Function — by_none","text":"","code":"by_none(gs_data)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/by_none.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"No Grading Policy Function — by_none","text":"gs_data wide formatted, processed Gradescope data","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/by_none.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"No Grading Policy Function — by_none","text":"wide formatted dataframe","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/by_percent.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Grade Weighted by Percent — by_percent","title":"Calculate Grade Weighted by Percent — by_percent","text":"functions calculates grade category assignment weighted equally","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/by_percent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Grade Weighted by Percent — by_percent","text":"","code":"by_percent(gs_data, sub_category, sub_assigns)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/by_percent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Grade Weighted by Percent — by_percent","text":"gs_data wide formatted, processed Gradescope data sub_category name sub-category grade calculated sub_assigns assignments within subcategory","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/by_percent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Grade Weighted by Percent — by_percent","text":"wide formatted dataframe raw score, max points percent new subcategory","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/by_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Grade Weighted by Points — by_points","title":"Calculate Grade Weighted by Points — by_points","text":"functions calculates grade category assignment weighted many points worth.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/by_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Grade Weighted by Points — by_points","text":"","code":"by_points(gs_data, sub_category, sub_assigns)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/by_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Grade Weighted by Points — by_points","text":"gs_data wide formatted, processed Gradescope data sub_category name sub-category grade calculated sub_assigns assignments within subcategory","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/by_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Grade Weighted by Points — by_points","text":"wide formatted dataframe raw score, max points percent new subcategory","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/by_weight.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Grade by Maximum Score in Category — by_weight","title":"Calculate Grade by Maximum Score in Category — by_weight","text":"functions calculates grade category weighting assignments given weights.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/by_weight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Grade by Maximum Score in Category — by_weight","text":"","code":"by_weight(gs_data, sub_category, sub_assigns, weights)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/by_weight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Grade by Maximum Score in Category — by_weight","text":"gs_data wide formatted, processed Gradescope data sub_category name sub-category grade calculated sub_assigns assignments within subcategory weights weights order sub_assigns","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/by_weight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Grade by Maximum Score in Category — by_weight","text":"wide formatted dataframe raw score, max points percent new subcategory","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/calculate_grades_with_for_loop.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Grades with For Loop — calculate_grades_with_for_loop","title":"Calculate Grades with For Loop — calculate_grades_with_for_loop","text":"function calculates grades -functions using loop","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/calculate_grades_with_for_loop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Grades with For Loop — calculate_grades_with_for_loop","text":"","code":"calculate_grades_with_for_loop(gs_data, flat_policy)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/calculate_grades_with_for_loop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Grades with For Loop — calculate_grades_with_for_loop","text":"gs_data processed prepped Gradescope data policy flattened processed policy file","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/calculate_grades_with_for_loop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Grades with For Loop — calculate_grades_with_for_loop","text":"gs_data appended subcategory overall grades","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/check_assignment_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Category Names — check_assignment_names","title":"Check Category Names — check_assignment_names","text":"functions checks assignments within categories policy file exists Gradescope data","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/check_assignment_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Category Names — check_assignment_names","text":"","code":"check_assignment_names(policy, pivot_df)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/check_assignment_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Category Names — check_assignment_names","text":"policy policy file validate pivot_df pivotted gradescope data","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/check_assignment_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Category Names — check_assignment_names","text":"None","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/check_cat_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Category Names — check_cat_names","title":"Check Category Names — check_cat_names","text":"functions checks names single category policy file","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/check_cat_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Category Names — check_cat_names","text":"","code":"check_cat_names(category_name)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/check_cat_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Category Names — check_cat_names","text":"category_name names within category policy file","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/check_cat_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Category Names — check_cat_names","text":"returns logical vector","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/check_data_colnames_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Formatting of Column Names for Gradescope Data — check_data_colnames_format","title":"Check Formatting of Column Names for Gradescope Data — check_data_colnames_format","text":"functions checks column names throughout Gradescope data","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/check_data_colnames_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Formatting of Column Names for Gradescope Data — check_data_colnames_format","text":"","code":"check_data_colnames_format(gs_data)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/check_data_colnames_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Formatting of Column Names for Gradescope Data — check_data_colnames_format","text":"gs_data Grades data validated right format terms names nesting","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/check_data_colnames_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Formatting of Column Names for Gradescope Data — check_data_colnames_format","text":"Outputs dataframe error","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/check_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Names for Policy File — check_names","title":"Check Names for Policy File — check_names","text":"functions checks names throughout policy file","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/check_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Names for Policy File — check_names","text":"","code":"check_names(policy)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/check_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Names for Policy File — check_names","text":"policy_file policy file validated right format terms names nesting","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/check_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Names for Policy File — check_names","text":"output, stops warnings","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/choose_aggregation.html","id":null,"dir":"Reference","previous_headings":"","what":"Choose Aggregation Function — choose_aggregation","title":"Choose Aggregation Function — choose_aggregation","text":"function determines aggregation function apply calculating grade subcategory.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/choose_aggregation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Choose Aggregation Function — choose_aggregation","text":"","code":"choose_aggregation(   aggregation,   gs_data,   sub_category,   sub_assigns,   weights = c() )"},{"path":"https://gradebook-dev.github.io/gradebook/reference/choose_aggregation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Choose Aggregation Function — choose_aggregation","text":"aggregation string denoting aggregation use ... values needed relevant grade calculation","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/choose_aggregation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Choose Aggregation Function — choose_aggregation","text":" wide formatted dataframe new calculated subcategory","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/compute_percent.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Percentages — compute_percent","title":"Compute Percentages — compute_percent","text":"function computes percents dividng raw_scores max_points assignment wide formatted, processed Gradescope data","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/compute_percent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Percentages — compute_percent","text":"","code":"compute_percent(processed_gs_data)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/compute_percent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Percentages — compute_percent","text":"processed_gs_data wide formatted, processed Gradescope data","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/compute_percent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Percentages — compute_percent","text":"wide formatted dataframe percentages","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/convert_to_min.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to Min — convert_to_min","title":"Convert to Min — convert_to_min","text":"Converted time HH:MM:SS format minutes","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/convert_to_min.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to Min — convert_to_min","text":"","code":"convert_to_min(hms)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/convert_to_min.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to Min — convert_to_min","text":"hms time HH:MM:SS format","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/convert_to_min.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to Min — convert_to_min","text":"number minutes","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/create_assigns_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an Assignments Table from Policy File\nThis function creates an assignment table where each row is an assignment with its category and relevant category information.\nThis is an intermediary table used to combine the policy file and Gradescope data — create_assigns_table","title":"Create an Assignments Table from Policy File\nThis function creates an assignment table where each row is an assignment with its category and relevant category information.\nThis is an intermediary table used to combine the policy file and Gradescope data — create_assigns_table","text":"Create Assignments Table Policy File function creates assignment table row assignment category relevant category information. intermediary table used combine policy file Gradescope data","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/create_assigns_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Assignments Table from Policy File\nThis function creates an assignment table where each row is an assignment with its category and relevant category information.\nThis is an intermediary table used to combine the policy file and Gradescope data — create_assigns_table","text":"","code":"create_assigns_table(policy)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/create_assigns_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an Assignments Table from Policy File\nThis function creates an assignment table where each row is an assignment with its category and relevant category information.\nThis is an intermediary table used to combine the policy file and Gradescope data — create_assigns_table","text":"policy validated policy file","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/create_assigns_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an Assignments Table from Policy File\nThis function creates an assignment table where each row is an assignment with its category and relevant category information.\nThis is an intermediary table used to combine the policy file and Gradescope data — create_assigns_table","text":"data frame","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/create_assigns_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an Assignments Table from Policy File\nThis function creates an assignment table where each row is an assignment with its category and relevant category information.\nThis is an intermediary table used to combine the policy file and Gradescope data — create_assigns_table","text":"","code":"# Example create_assigns_table(policy_demo) #>     assignments    category slipdays late_time1 late_time2 late_scale1 #> 1         lab_1        Labs        0   00:00:00   00:00:01           1 #> 2         lab_2        Labs        0   00:00:00   00:00:01           1 #> 3         lab_3        Labs        0   00:00:00   00:00:01           1 #> 4         lab_4        Labs        0   00:00:00   00:00:01           1 #> 5         lab_5        Labs        0   00:00:00   00:00:01           1 #> 6         lab_6        Labs        0   00:00:00   00:00:01           1 #> 7  discussion_1 Discussions        0   00:00:01   00:00:00           1 #> 8  discussion_2 Discussions        0   00:00:01   00:00:00           1 #> 9       midterm     Midterm        0   00:00:01   00:00:00           1 #> 10        final       Final        0   00:00:01   00:00:00           1 #>    late_scale2 after weights drops weighted_method clobber #> 1            0  TRUE      55     2         equally    None #> 2            0  TRUE      55     2         equally    None #> 3            0  TRUE      55     2         equally    None #> 4            0  TRUE      55     2         equally    None #> 5            0  TRUE      55     2         equally    None #> 6            0  TRUE      55     2         equally    None #> 7            0  TRUE      10     0       by_points    None #> 8            0  TRUE      10     0       by_points    None #> 9            0  TRUE      15     0         equally    None #> 10           0  TRUE      20     0       by_points    None"},{"path":"https://gradebook-dev.github.io/gradebook/reference/create_empty_policy_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an Empty Policy File — create_empty_policy_file","title":"Create an Empty Policy File — create_empty_policy_file","text":"function creates empty policy file certain number categories.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/create_empty_policy_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Empty Policy File — create_empty_policy_file","text":"","code":"create_empty_policy_file(num_cat = 1)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/create_empty_policy_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an Empty Policy File — create_empty_policy_file","text":"num_cat number categories policy file","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/create_empty_policy_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an Empty Policy File — create_empty_policy_file","text":"empty policy file list","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/create_empty_policy_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an Empty Policy File — create_empty_policy_file","text":"","code":"create_empty_policy_file(num_cat = 3) #> $coursewide #> $coursewide$course_name #> [1] \"Course Name\" #>  #> $coursewide$description #> [1] \"cours description\" #>  #>  #> $categories #> $categories[[1]] #> $categories[[1]]$name #> [1] \"Category 1\" #>  #> $categories[[1]]$slipdays #> [1] 0 #>  #> $categories[[1]]$late_time1 #> [1] \"00:00:00\" #>  #> $categories[[1]]$late_time2 #> [1] \"00:00:00\" #>  #> $categories[[1]]$late_scale1 #> [1] 1 #>  #> $categories[[1]]$late_scale2 #> [1] 0 #>  #> $categories[[1]]$after #> [1] TRUE #>  #> $categories[[1]]$weight #> [1] 0 #>  #> $categories[[1]]$drops #> [1] 0 #>  #> $categories[[1]]$weighted_method #> [1] \"equally\"   \"by_points\" #>  #> $categories[[1]]$clobber #> [1] \"None\" #>  #> $categories[[1]]$assigns #> NULL #>  #>  #> $categories[[2]] #> $categories[[2]]$name #> [1] \"Category 2\" #>  #> $categories[[2]]$slipdays #> [1] 0 #>  #> $categories[[2]]$late_time1 #> [1] \"00:00:00\" #>  #> $categories[[2]]$late_time2 #> [1] \"00:00:00\" #>  #> $categories[[2]]$late_scale1 #> [1] 1 #>  #> $categories[[2]]$late_scale2 #> [1] 0 #>  #> $categories[[2]]$after #> [1] TRUE #>  #> $categories[[2]]$weight #> [1] 0 #>  #> $categories[[2]]$drops #> [1] 0 #>  #> $categories[[2]]$weighted_method #> [1] \"equally\"   \"by_points\" #>  #> $categories[[2]]$clobber #> [1] \"None\" #>  #> $categories[[2]]$assigns #> NULL #>  #>  #> $categories[[3]] #> $categories[[3]]$name #> [1] \"Category 3\" #>  #> $categories[[3]]$slipdays #> [1] 0 #>  #> $categories[[3]]$late_time1 #> [1] \"00:00:00\" #>  #> $categories[[3]]$late_time2 #> [1] \"00:00:00\" #>  #> $categories[[3]]$late_scale1 #> [1] 1 #>  #> $categories[[3]]$late_scale2 #> [1] 0 #>  #> $categories[[3]]$after #> [1] TRUE #>  #> $categories[[3]]$weight #> [1] 0 #>  #> $categories[[3]]$drops #> [1] 0 #>  #> $categories[[3]]$weighted_method #> [1] \"equally\"   \"by_points\" #>  #> $categories[[3]]$clobber #> [1] \"None\" #>  #> $categories[[3]]$assigns #> NULL #>  #>  #>  #> $cutoff #> $cutoff$A #> [1] 90 #>  #> $cutoff$B #> [1] 80 #>  #> $cutoff$C #> [1] 70 #>  #> $cutoff$D #> [1] 60 #>  #> $cutoff$F #> [1] 0 #>  #>"},{"path":"https://gradebook-dev.github.io/gradebook/reference/create_overall_category.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Overall Grade Category in Policy File — create_overall_category","title":"Create Overall Grade Category in Policy File — create_overall_category","text":"function creates super-category called \"Overall Grade\" within policy file. represents overall grade course.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/create_overall_category.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Overall Grade Category in Policy File — create_overall_category","text":"","code":"create_overall_category(policy_nested)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/create_overall_category.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Overall Grade Category in Policy File — create_overall_category","text":"policy_nested policy file (nested) categories","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/create_overall_category.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Overall Grade Category in Policy File — create_overall_category","text":"policy file additional \"Overall Grade\" category","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/data_merge_assigns.html","id":null,"dir":"Reference","previous_headings":"","what":"Merges processed pivot data\nThis function merges processed pivot data with assignment table — data_merge_assigns","title":"Merges processed pivot data\nThis function merges processed pivot data with assignment table — data_merge_assigns","text":"Merges processed pivot data function merges processed pivot data assignment table","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/data_merge_assigns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merges processed pivot data\nThis function merges processed pivot data with assignment table — data_merge_assigns","text":"","code":"data_merge_assigns(assigns_table, pivot_df)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/data_merge_assigns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merges processed pivot data\nThis function merges processed pivot data with assignment table — data_merge_assigns","text":"assigns_table assignment table made policy file pivot_df processed pivotted data Gradescope","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/data_merge_assigns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merges processed pivot data\nThis function merges processed pivot data with assignment table — data_merge_assigns","text":"data frame","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/delete_category.html","id":null,"dir":"Reference","previous_headings":"","what":"Deletes category with name ","title":"Deletes category with name ","text":"Deletes category name \"name\"","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/delete_category.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deletes category with name ","text":"","code":"delete_category(policy_list, name)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/delete_category.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deletes category with name ","text":"policy_list policy list adding category previous one. name name category.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/delete_category.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deletes category with name ","text":"list.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/drop_na_assignments.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop NA Assignments — drop_na_assignments","title":"Drop NA Assignments — drop_na_assignments","text":"function drops assignments assigned category","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/drop_na_assignments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop NA Assignments — drop_na_assignments","text":"","code":"drop_na_assignments(merged_files)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/drop_na_assignments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop NA Assignments — drop_na_assignments","text":"merged_files merged file pivot_df + policy","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/drop_na_assignments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop NA Assignments — drop_na_assignments","text":"data frame assigned assignments","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/drop_ungraded_assignments.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop Ungraded Assignments — drop_ungraded_assignments","title":"Drop Ungraded Assignments — drop_ungraded_assignments","text":"functions drops assignments grades students replaced -Inf values","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/drop_ungraded_assignments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop Ungraded Assignments — drop_ungraded_assignments","text":"","code":"drop_ungraded_assignments(gs_data, give_alert = TRUE)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/drop_ungraded_assignments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop Ungraded Assignments — drop_ungraded_assignments","text":"gs_data Gradescope data","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/drop_ungraded_assignments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop Ungraded Assignments — drop_ungraded_assignments","text":"dataframe without graded assignments","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/drops.html","id":null,"dir":"Reference","previous_headings":"","what":"Accounting for Drops — drops","title":"Accounting for Drops — drops","text":"function accounts allowed drops per category removes dropped assignments calculations","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/drops.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accounting for Drops — drops","text":"","code":"drops(merged_files)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/drops.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accounting for Drops — drops","text":"merged_files merged file assigned assignments","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/drops.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accounting for Drops — drops","text":"data frame drops accounted ","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/equally_weighted.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate assignment scores — equally_weighted","title":"Aggregate assignment scores — equally_weighted","text":"collection functions aggregate assignment scores. s equally_weighted() computes mean option drop lowest scores. weighted_by_points() computes weighted mean using weights vector optionally dropping lowest scores. max_score() computes max score. min_score() computes min score optionally dropping lowest scores. none() 1 score, returns , otherwise throws error. Serves passthrough aggregation categories 1 assignment.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/equally_weighted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate assignment scores — equally_weighted","text":"","code":"equally_weighted(scores, n_drops = 0, ...)  weighted_by_points(scores, weights, n_drops = 0, ...)  max_score(scores, ...)  min_score(scores, n_drops = 0, ...)  none(scores, ...)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/equally_weighted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate assignment scores — equally_weighted","text":"scores vector assignment scores. n_drops number lowest scores drop aggregating. weights vector weights length scores. Weights sum one ok - get normalized.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/equally_weighted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate assignment scores — equally_weighted","text":"single aggregated score (vector length 1).","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/equally_weighted.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate assignment scores — equally_weighted","text":"","code":"my_scores <- c(.7, .9, .1) my_weights <- c(15, 10, 10)  equally_weighted(scores = my_scores, n_drops = 1) #> [1] 0.8 weighted_by_points(scores = my_scores, weights = my_weights, n_drops = 1) #> [1] 0.78 max_score(my_scores) #> [1] 0.9 min_score(my_scores, n_drops = 1) #> [1] 0.1 my_score <- c(.7) none(my_score) #> [1] 0.7"},{"path":"https://gradebook-dev.github.io/gradebook/reference/extract_nested.html","id":null,"dir":"Reference","previous_headings":"","what":"Unnest subcategories from a category — extract_nested","title":"Unnest subcategories from a category — extract_nested","text":"Takes top level category policy file (e.g. problem sets) acts recursively extract categories nested within return list single level.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/extract_nested.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unnest subcategories from a category — extract_nested","text":"","code":"extract_nested(category)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/extract_nested.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unnest subcategories from a category — extract_nested","text":"category element policy file, R list.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/extract_nested.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unnest subcategories from a category — extract_nested","text":"list categories (lists depth 1) beginning deeply nested ending outer layer input category.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/extract_nested.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unnest subcategories from a category — extract_nested","text":"","code":"# Example extract_nested(policy_demo[[1]]) #> [[1]] #> [[1]]$course_name #> [1] \"Demo Course\" #>  #> [[1]]$description #> [1] \"This is a demo class dataset to demonstrate the app.\" #>  #>"},{"path":"https://gradebook-dev.github.io/gradebook/reference/flatten_policy.html","id":null,"dir":"Reference","previous_headings":"","what":"Reshape policy file from nested to flat — flatten_policy","title":"Reshape policy file from nested to flat — flatten_policy","text":"Cycles top-level categories policy file unnested subcategories create single level list categories subcategories.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/flatten_policy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reshape policy file from nested to flat — flatten_policy","text":"","code":"flatten_policy(policy)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/flatten_policy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reshape policy file from nested to flat — flatten_policy","text":"policy valid policy file stored list.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/flatten_policy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reshape policy file from nested to flat — flatten_policy","text":"single level list categories subcategories ordered leaves precede parent category list order.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/flatten_policy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reshape policy file from nested to flat — flatten_policy","text":"","code":"# Example flatten_policy(policy_demo) #> $coursewide #> $coursewide$course_name #> [1] \"Demo Course\" #>  #> $coursewide$description #> [1] \"This is a demo class dataset to demonstrate the app.\" #>  #>  #> $categories #> $categories[[1]] #> $categories[[1]]$name #> [1] \"Labs\" #>  #> $categories[[1]]$slipdays #> [1] 0 #>  #> $categories[[1]]$late_time1 #> [1] \"00:00:00\" #>  #> $categories[[1]]$late_time2 #> [1] \"00:00:01\" #>  #> $categories[[1]]$late_scale1 #> [1] 1 #>  #> $categories[[1]]$late_scale2 #> [1] 0 #>  #> $categories[[1]]$after #> [1] TRUE #>  #> $categories[[1]]$weight #> [1] 55 #>  #> $categories[[1]]$drops #> [1] 2 #>  #> $categories[[1]]$weighted_method #> [1] \"equally\"   \"by_points\" #>  #> $categories[[1]]$clobber #> [1] \"None\" #>  #> $categories[[1]]$assigns #> [1] \"lab_1\" \"lab_2\" \"lab_3\" \"lab_4\" \"lab_5\" \"lab_6\" #>  #>  #> $categories[[2]] #> $categories[[2]]$name #> [1] \"Discussions\" #>  #> $categories[[2]]$slipdays #> [1] 0 #>  #> $categories[[2]]$late_time1 #> [1] \"00:00:01\" #>  #> $categories[[2]]$late_time2 #> [1] \"00:00:00\" #>  #> $categories[[2]]$late_scale1 #> [1] 1 #>  #> $categories[[2]]$late_scale2 #> [1] 0 #>  #> $categories[[2]]$after #> [1] TRUE #>  #> $categories[[2]]$weight #> [1] 10 #>  #> $categories[[2]]$drops #> [1] 0 #>  #> $categories[[2]]$weighted_method #> [1] \"equally\"   \"by_points\" #>  #> $categories[[2]]$clobber #> [1] \"None\" #>  #> $categories[[2]]$assigns #> [1] \"discussion_1\" \"discussion_2\" #>  #>  #> $categories[[3]] #> $categories[[3]]$name #> [1] \"Midterm\" #>  #> $categories[[3]]$slipdays #> [1] 0 #>  #> $categories[[3]]$late_time1 #> [1] \"00:00:01\" #>  #> $categories[[3]]$late_time2 #> [1] \"00:00:00\" #>  #> $categories[[3]]$late_scale1 #> [1] 1 #>  #> $categories[[3]]$late_scale2 #> [1] 0 #>  #> $categories[[3]]$after #> [1] TRUE #>  #> $categories[[3]]$weight #> [1] 15 #>  #> $categories[[3]]$drops #> [1] 0 #>  #> $categories[[3]]$weighted_method #> [1] \"equally\"   \"by_points\" #>  #> $categories[[3]]$clobber #> [1] \"None\" #>  #> $categories[[3]]$assigns #> [1] \"midterm\" #>  #>  #> $categories[[4]] #> $categories[[4]]$name #> [1] \"Final\" #>  #> $categories[[4]]$slipdays #> [1] 0 #>  #> $categories[[4]]$late_time1 #> [1] \"00:00:01\" #>  #> $categories[[4]]$late_time2 #> [1] \"00:00:00\" #>  #> $categories[[4]]$late_scale1 #> [1] 1 #>  #> $categories[[4]]$late_scale2 #> [1] 0 #>  #> $categories[[4]]$after #> [1] TRUE #>  #> $categories[[4]]$weight #> [1] 20 #>  #> $categories[[4]]$drops #> [1] 0 #>  #> $categories[[4]]$weighted_method #> [1] \"equally\"   \"by_points\" #>  #> $categories[[4]]$clobber #> [1] \"None\" #>  #> $categories[[4]]$assigns #> [1] \"final\" #>  #>  #>  #> $cutoff #> $cutoff$A #> [1] 90 #>  #> $cutoff$B #> [1] 80 #>  #> $cutoff$C #> [1] 70 #>  #> $cutoff$D #> [1] 60 #>  #> $cutoff$F #> [1] 0 #>  #>"},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_assignments_unprocessed_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the Assignment Names for Unprocessed Gradescope Data — get_assignments_unprocessed_data","title":"Get the Assignment Names for Unprocessed Gradescope Data — get_assignments_unprocessed_data","text":"function identified assignments unprocessed gradescope data","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_assignments_unprocessed_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Assignment Names for Unprocessed Gradescope Data — get_assignments_unprocessed_data","text":"","code":"get_assignments_unprocessed_data(df, give_alert = TRUE)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_assignments_unprocessed_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the Assignment Names for Unprocessed Gradescope Data — get_assignments_unprocessed_data","text":"gs_data unprocessed Gradescope dataframe","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_assignments_unprocessed_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the Assignment Names for Unprocessed Gradescope Data — get_assignments_unprocessed_data","text":"list assignments","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_cat_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Finds index of category within a policy list — get_cat_index","title":"Finds index of category within a policy list — get_cat_index","text":"Finds index category within policy list","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_cat_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finds index of category within a policy list — get_cat_index","text":"","code":"get_cat_index(policy_list, name)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_cat_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finds index of category within a policy list — get_cat_index","text":"policy_list policy list adding category previous one. name name category.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_cat_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finds index of category within a policy list — get_cat_index","text":"integer.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_cat_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Finds index of category within a policy list — get_cat_index","text":"","code":"get_cat_index( update_category(name = \"LABS\"), \"LABS\") #> [1] 1"},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_category_grades.html","id":null,"dir":"Reference","previous_headings":"","what":"Get category grades for all students — get_category_grades","title":"Get category grades for all students — get_category_grades","text":"Iterates get_one_grade() across categories policy file across students present gs file.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_category_grades.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get category grades for all students — get_category_grades","text":"","code":"get_category_grades(gs, policy)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_category_grades.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get category grades for all students — get_category_grades","text":"gs vector assignment scores weights coming row gs data frame. policy_item single-layer list containing, least assignments, vector optionally n_drops, integer.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_category_grades.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get category grades for all students — get_category_grades","text":"extended version gs data frame, columns added category described policy file containing grades student.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_duplicate_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a Dataframe with Duplicate Student IDs — get_duplicate_ids","title":"Return a Dataframe with Duplicate Student IDs — get_duplicate_ids","text":"Returns duplicate Student IDs data. Must pre-process dataframe check_colnames() gradebook package.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_duplicate_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a Dataframe with Duplicate Student IDs — get_duplicate_ids","text":"","code":"get_duplicate_ids(gs_data)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_duplicate_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a Dataframe with Duplicate Student IDs — get_duplicate_ids","text":"gs_data dataframe (csv Gradescope) containing column named \"sid\" holds student IDs.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_duplicate_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return a Dataframe with Duplicate Student IDs — get_duplicate_ids","text":"dataframe \"get_duplicate_ids\": dataframe containing duplicate students data.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_duplicate_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return a Dataframe with Duplicate Student IDs — get_duplicate_ids","text":"","code":"# Example dataframe data <- data.frame(   sid = c(3032412514, NA, 3032412516,           3032412517, 3032412518, 3032412519, 3032412520, 3032412521, 3032412521),    names = c(\"John Smith\", \"Jane Doe\", \"Robert Brown\", \"Emily Johnson\",            \"Michael Davis\", \"Linda Wilson\", \"James Taylor\", \"Patricia Anderson\", \"Patricia Anderson\"),   email = c(\"john.smith@berkeley.edu\", \"jane.doe@berkeley.edu\", \"robert.brown@berkeley.edu\",             \"emily.johnson@berkeley.edu\", \"michael.davis@berkeley.edu\",             \"linda.wilson@berkeley.edu\", \"james.taylor@berkeley.edu\",             \"patricia.anderson@berkeley.edu\", \"patricia.anderson@berkeley.edu\"             )  ) processed_data <- process_id(data)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_id_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the ID Columns for Gradescope Data — get_id_cols","title":"Get the ID Columns for Gradescope Data — get_id_cols","text":"function identified id columns gradescope data","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_id_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the ID Columns for Gradescope Data — get_id_cols","text":"","code":"get_id_cols(df)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_id_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the ID Columns for Gradescope Data — get_id_cols","text":"gs_data Gradescope dataframe","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_id_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the ID Columns for Gradescope Data — get_id_cols","text":"list id columns","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_id_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the ID Columns for Gradescope Data — get_id_cols","text":"","code":"df <- tibble::tibble( name = 'name', email = 'email', sid = '343432', `PS 1_-_Raw_Score` = 1, `PS 1_-_Max_points` = 1, `PS 1_-_Submission_time` = '1/21/2023 10:00:00 AM', `PS 1-_-Lateness_(h_m_s)` = '0:00:00' )"},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_id_cols_unprocessed_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the ID Columns for Unprocessed Gradescope Data — get_id_cols_unprocessed_data","title":"Get the ID Columns for Unprocessed Gradescope Data — get_id_cols_unprocessed_data","text":"function identified id columns unprocessed gradescope data","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_id_cols_unprocessed_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the ID Columns for Unprocessed Gradescope Data — get_id_cols_unprocessed_data","text":"","code":"get_id_cols_unprocessed_data(df, give_alert = TRUE)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_id_cols_unprocessed_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the ID Columns for Unprocessed Gradescope Data — get_id_cols_unprocessed_data","text":"gs_data unprocessed Gradescope dataframe","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_id_cols_unprocessed_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the ID Columns for Unprocessed Gradescope Data — get_id_cols_unprocessed_data","text":"list unprocessed id columns","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_one_grade.html","id":null,"dir":"Reference","previous_headings":"","what":"Get one category grade — get_one_grade","title":"Get one category grade — get_one_grade","text":"Applies one aggregation functions grade data one student calculate one category grade student.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_one_grade.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get one category grade — get_one_grade","text":"","code":"get_one_grade(gs_row, policy_item)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_one_grade.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get one category grade — get_one_grade","text":"gs_row vector assignment scores weights coming row gs data frame. policy_item single-layer list containing, least assignments, vector optionally n_drops, integer.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_one_grade.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get one category grade — get_one_grade","text":"single aggregated category grade.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/gs_demo.html","id":null,"dir":"Reference","previous_headings":"","what":"Gradescope Demo Data — gs_demo","title":"Gradescope Demo Data — gs_demo","text":"fake dataset mimics Gradescope .csv format","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/gs_demo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gradescope Demo Data — gs_demo","text":"","code":"gs_demo"},{"path":[]},{"path":"https://gradebook-dev.github.io/gradebook/reference/gs_demo.html","id":"gs-demo","dir":"Reference","previous_headings":"","what":"gs_demo","title":"Gradescope Demo Data — gs_demo","text":"data frame 10 rows 44 columns: Names student name Email student email SID student ID number Sections student class section Lab 1 assignment called Lab 1 Lab 1 - Max Points maximum possible points Lab 1 Lab 1 - Lateness (H:M:S) late Lab 1 turned , formatted HH:MM:SS following assignments follow three-column format Lab 1. Additional assignments gs_demo follows: Lab 2, Lab 3, Lab 4, Lab 5, Lab 6, Discussion 1, Discussion 2, Midterm Final","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/lateness.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculating Lateness — lateness","title":"Calculating Lateness — lateness","text":"function calculates lateness; adds column calculated score lateness accounted ","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/lateness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculating Lateness — lateness","text":"","code":"lateness(merged_files)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/lateness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculating Lateness — lateness","text":"lateness merged file assigned assignments","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/lateness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculating Lateness — lateness","text":"data frame assigned assignments including lateness accounted score","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/lower_colnames.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Column Names for Gradescope Data — lower_colnames","title":"Check Column Names for Gradescope Data — lower_colnames","text":"functions changes lower case column names throughout Gradescope data","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/lower_colnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Column Names for Gradescope Data — lower_colnames","text":"","code":"lower_colnames(processed_data)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/lower_colnames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Column Names for Gradescope Data — lower_colnames","text":"gs_data dataframe column names.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/lower_colnames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Column Names for Gradescope Data — lower_colnames","text":"dataframe lower case column names","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/lower_colnames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Column Names for Gradescope Data — lower_colnames","text":"","code":"data <- data.frame(   'SID' <- c(123,345),   'NAME' = c('Al', 'Ben'),   'EMAIL' = c('al@company.com', 'ben@company.com') ) lower <- lower_colnames(data)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/pivot_gs.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert GS data to longer table — pivot_gs","title":"Convert GS data to longer table — pivot_gs","text":"function takes gradescope dataframe processed remove duplicate students invalid IDs applies pivot longer function allow unit observation student + individual assignment","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/pivot_gs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert GS data to longer table — pivot_gs","text":"","code":"pivot_gs(processed_data, names_sep = \"_-_\")"},{"path":"https://gradebook-dev.github.io/gradebook/reference/pivot_gs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert GS data to longer table — pivot_gs","text":"processed_data dataframe (csv Gradescope) containing column named \"sid\" holds student IDs.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/pivot_gs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert GS data to longer table — pivot_gs","text":"dataframe \"student_assignments_long\": dataframe unit observation student + assignment.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/pivot_gs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert GS data to longer table — pivot_gs","text":"","code":"# Example processed_data <- tibble::tibble(   `sid` = c(3032412514, 3032122516, 3032412516,             3032412517, 3032412518, 3032412519,             3032412521, 3032412521),   `sections` = c(\"Stat20\", \"Stat20\", \"Stat20\", \"Stat20\",                 \"Stat20\", \"Stat20\", \"Stat20\", \"Stat20\"),      `names` = c(\"John Smith\", \"Jane Doe\", \"Robert Brown\", \"Emily Johnson\",              \"Michael Davis\", \"Linda Wilson\", \"James Taylor\", \"Patricia Anderson\"),   `email` = c(\"john.smith@berkeley.edu\", \"jane.doe@berkeley.edu\",               \"robert.brown@berkeley.edu\", \"emily.johnson@berkeley.edu\",               \"michael.davis@berkeley.edu\", \"linda.wilson@berkeley.edu\",               \"james.taylor@berkeley.edu\", \"patricia.anderson@berkeley.edu\"),   `lab1_-_Raw_Score` = c(1, 0, 0.9, 0.5, 1, 0.9, 1, 0.8),   `lab1_-_Max_Points` = c(1, 1, 1, 1, 1, 1, 1, 1),   `lab1_-_Submission_Time` = c(\"1/19/2023 9:25:00 AM\", \"0\", \"1/19/2023 10:00:00 AM\", \"0\",                                \"1/19/2023 9:00:00 AM\", \"1/19/2023 9:30:00 AM\", \"1/19/2023 9:20:00 AM\", \"1/19/2023 9:15:00 AM\"),   `lab1_-_Lateness_(H_M_S)` = c(\"0:00:00\", \"0:00:00\", \"0:00:00\", \"0:00:00\",                                 \"0:00:00\", \"0:00:00\", \"0:00:00\", \"0:00:00\"),      `lab2_-_Raw_Score` = c(1, 0, 0.9, 0.5, 1, 0.9, 1, 0.9),   `lab2_-_Max_Points` = c(1, 1, 1, 1, 1, 1, 1, 1),   `lab2_-_Submission_Time` = c(\"1/20/2023 9:25:00 AM\", \"0\", \"1/20/2023 10:00:00 AM\", \"1/20/2023 9:50:00 AM\",                                \"1/20/2023 9:00:00 AM\", \"0\", \"1/20/2023 9:20:00 AM\", \"1/20/2023 9:30:00 AM\"),   `lab2_-_Lateness_(H_M_S)` = c(\"0:00:00\", \"0:00:00\", \"0:00:00\", \"0:00:00\", \"0:00:00\", \"0:00:00\", \"0:00:00\", \"0:00:00\"),      `lab3_-_Raw_Score` = c(0, 0, 0.9, 0.5, 1, 0.9, 1, 0.9),   `lab3_-_Max_Points` = c(1, 1, 1, 1, 1, 1, 1, 1),   `lab3_-_Submission_Time` = c(\"0\", \"0\", \"1/21/2023 10:00:00 AM\", \"1/21/2023 9:50:00 AM\", \"1/21/2023 9:00:00 AM\", \"1/21/2023 9:30:00 AM\", \"1/21/2023 9:20:00 AM\", \"1/21/2023 9:45:00 AM\"),   `lab3_-_Lateness_(H_M_S)` = c(\"0:00:00\", \"0:00:00\", \"0:00:00\", \"0:00:00\", \"0:00:00\", \"0:00:00\", \"0:00:00\", \"0:00:00\"),      `project1_-_Raw_Score` = c(0.9, 0, 0.4, 0, 0.99, 0.9, 1, 0.9),   `project1_-_Max_Points` = c(1, 1, 1, 1, 1, 1, 1, 1),   `project1_-_Submission_Time` = c(\"1/22/2023 9:25:00 AM\", \"0\", \"1/22/2023 10:00:00 AM\", \"0\", \"1/22/2023 9:00:00 AM\", \"1/22/2023 9:30:00 AM\", \"1/22/2023 9:20:00 AM\", \"1/22/2023 9:45:00 AM\"),   `project1_-_Lateness_(H_M_S)` = c(\"0:00:00\", \"0:00:00\", \"0:00:00\", \"0:00:00\", \"0:00:00\", \"0:00:00\", \"0:00:00\", \"0:00:00\") )  student_assignments_long_data <- pivot_gs(processed_data) #> Important Message #> ℹ The ID columns from Gradescope are sid, sections, names, and email"},{"path":"https://gradebook-dev.github.io/gradebook/reference/policy_demo.html","id":null,"dir":"Reference","previous_headings":"","what":"Policy Demo File — policy_demo","title":"Policy Demo File — policy_demo","text":"demo policy file mimics hypothetical class syllabus","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/policy_demo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Policy Demo File — policy_demo","text":"","code":"policy_demo"},{"path":"https://gradebook-dev.github.io/gradebook/reference/policy_demo.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Policy Demo File — policy_demo","text":"list three nested lists COURSEWIDE first nested list general information class course_name name course description relevant course description, purely user CATEGORIES second nested list syllabus broken categories respective grading criteria name category name slipdays number slip days late_time1, late_time2 cutoffs lateness penalty late_scale1, late_scale2 lateness penalty respective lateness cutoffs TRUE, late_scale1 applied late_time1 passed; FALSE, late_scale1 applied late_scale2 passed; late_scale2 late_time2 weight weight category overall grade drops number lowest-score assignments dropped grade weighted_equally TRUE, assignments weighted percentages; FALSE, assignments weighted max-point value clobber clobber-category higher grade one, clobber-category's grade replaces grade category assigns list assignment names falls category CUTOFF third final nested list cutoff reflects lower bound cutoff letter grade: ,B,C,D,F","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/policy_demo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Policy Demo File — policy_demo","text":"","code":"policy_demo #> $coursewide #> $coursewide$course_name #> [1] \"Demo Course\" #>  #> $coursewide$description #> [1] \"This is a demo class dataset to demonstrate the app.\" #>  #>  #> $categories #> $categories[[1]] #> $categories[[1]]$name #> [1] \"Labs\" #>  #> $categories[[1]]$slipdays #> [1] 0 #>  #> $categories[[1]]$late_time1 #> [1] \"00:00:00\" #>  #> $categories[[1]]$late_time2 #> [1] \"00:00:01\" #>  #> $categories[[1]]$late_scale1 #> [1] 1 #>  #> $categories[[1]]$late_scale2 #> [1] 0 #>  #> $categories[[1]]$after #> [1] TRUE #>  #> $categories[[1]]$weight #> [1] 55 #>  #> $categories[[1]]$drops #> [1] 2 #>  #> $categories[[1]]$weighted_method #> [1] \"equally\"   \"by_points\" #>  #> $categories[[1]]$clobber #> [1] \"None\" #>  #> $categories[[1]]$assigns #> [1] \"lab_1\" \"lab_2\" \"lab_3\" \"lab_4\" \"lab_5\" \"lab_6\" #>  #>  #> $categories[[2]] #> $categories[[2]]$name #> [1] \"Discussions\" #>  #> $categories[[2]]$slipdays #> [1] 0 #>  #> $categories[[2]]$late_time1 #> [1] \"00:00:01\" #>  #> $categories[[2]]$late_time2 #> [1] \"00:00:00\" #>  #> $categories[[2]]$late_scale1 #> [1] 1 #>  #> $categories[[2]]$late_scale2 #> [1] 0 #>  #> $categories[[2]]$after #> [1] TRUE #>  #> $categories[[2]]$weight #> [1] 10 #>  #> $categories[[2]]$drops #> [1] 0 #>  #> $categories[[2]]$weighted_method #> [1] \"equally\"   \"by_points\" #>  #> $categories[[2]]$clobber #> [1] \"None\" #>  #> $categories[[2]]$assigns #> [1] \"discussion_1\" \"discussion_2\" #>  #>  #> $categories[[3]] #> $categories[[3]]$name #> [1] \"Midterm\" #>  #> $categories[[3]]$slipdays #> [1] 0 #>  #> $categories[[3]]$late_time1 #> [1] \"00:00:01\" #>  #> $categories[[3]]$late_time2 #> [1] \"00:00:00\" #>  #> $categories[[3]]$late_scale1 #> [1] 1 #>  #> $categories[[3]]$late_scale2 #> [1] 0 #>  #> $categories[[3]]$after #> [1] TRUE #>  #> $categories[[3]]$weight #> [1] 15 #>  #> $categories[[3]]$drops #> [1] 0 #>  #> $categories[[3]]$weighted_method #> [1] \"equally\"   \"by_points\" #>  #> $categories[[3]]$clobber #> [1] \"None\" #>  #> $categories[[3]]$assigns #> [1] \"midterm\" #>  #>  #> $categories[[4]] #> $categories[[4]]$name #> [1] \"Final\" #>  #> $categories[[4]]$slipdays #> [1] 0 #>  #> $categories[[4]]$late_time1 #> [1] \"00:00:01\" #>  #> $categories[[4]]$late_time2 #> [1] \"00:00:00\" #>  #> $categories[[4]]$late_scale1 #> [1] 1 #>  #> $categories[[4]]$late_scale2 #> [1] 0 #>  #> $categories[[4]]$after #> [1] TRUE #>  #> $categories[[4]]$weight #> [1] 20 #>  #> $categories[[4]]$drops #> [1] 0 #>  #> $categories[[4]]$weighted_method #> [1] \"equally\"   \"by_points\" #>  #> $categories[[4]]$clobber #> [1] \"None\" #>  #> $categories[[4]]$assigns #> [1] \"final\" #>  #>  #>  #> $cutoff #> $cutoff$A #> [1] 90 #>  #> $cutoff$B #> [1] 80 #>  #> $cutoff$C #> [1] 70 #>  #> $cutoff$D #> [1] 60 #>  #> $cutoff$F #> [1] 0 #>  #>   # yaml:as_yaml(policy_demo)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/prep_for_grading.html","id":null,"dir":"Reference","previous_headings":"","what":"Prep Processed Gradescope — prep_for_grading","title":"Prep Processed Gradescope — prep_for_grading","text":"function prepares processed Gradescope data grading computing percentages. wide == TRUE, function removes lateness submission columns","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/prep_for_grading.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prep Processed Gradescope — prep_for_grading","text":"","code":"prep_for_grading(processed_gs_data, wide = TRUE)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/prep_for_grading.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prep Processed Gradescope — prep_for_grading","text":"processed_gs_data wide formatted, processed Gradescope data wide TRUE wide format, FALSE pivotted format","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/prep_for_grading.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prep Processed Gradescope — prep_for_grading","text":"wide formatted dataframe scores","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/process_assignments.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove white spaces and special characters from column names — process_assignments","title":"Remove white spaces and special characters from column names — process_assignments","text":"function takes gradescope dataframe removes white spaces special characters column names","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/process_assignments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove white spaces and special characters from column names — process_assignments","text":"","code":"process_assignments(processed_data)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/process_assignments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove white spaces and special characters from column names — process_assignments","text":"processed_data dataframe (csv Gradescope)","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/process_assignments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove white spaces and special characters from column names — process_assignments","text":"dataframe \"processed_data\": Returns dataframe modified column names.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/process_assignments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove white spaces and special characters from column names — process_assignments","text":"","code":"#gradebook gradescope demo data: gs_demo #> # A tibble: 10 × 44 #>    Names               Email           SID Sections `Lab 1` `Lab 1 - Max Points` #>    <chr>               <chr>         <dbl> <chr>      <dbl>                <dbl> #>  1 Dr. Kadin           Dr.Kadin@be… 3.03e9 fake-cl…       9                   10 #>  2 Bartley Toy         BartleyToy@… 3.03e9 fake-cl…       5                   10 #>  3 Dr. Dontae          Dr.Dontae@b… 3.03e9 fake-cl…      10                   10 #>  4 Narcissus Considine NarcissusCo… 3.03e9 fake-cl…      10                   10 #>  5 Verne Wilderman     VerneWilder… 3.03e9 fake-cl…       8                   10 #>  6 Toivo Witting       ToivoWittin… 3.03e9 fake-cl…       9                   10 #>  7 Tegan Crooks        TeganCrooks… 3.03e9 fake-cl…       8                   10 #>  8 Tyrus Cremin-Wisozk TyrusCremin… 3.03e9 fake-cl…       2                   10 #>  9 Sydni Hansen        SydniHansen… 3.03e9 fake-cl…       8                   10 #> 10 Mrs. Chelsie        Mrs.Chelsie… 3.03e9 fake-cl…       5                   10 #> # ℹ 38 more variables: `Lab 1 - Submission Time` <chr>, #> #   `Lab 1 - Lateness (H:M:S)` <hms>, `Lab 2` <dbl>, #> #   `Lab 2 - Max Points` <dbl>, `Lab 2 - Submission Time` <chr>, #> #   `Lab 2 - Lateness (H:M:S)` <hms>, `Lab 3` <dbl>, #> #   `Lab 3 - Max Points` <dbl>, `Lab 3 - Submission Time` <chr>, #> #   `Lab 3 - Lateness (H:M:S)` <hms>, `Lab 4` <dbl>, #> #   `Lab 4 - Max Points` <dbl>, `Lab 4 - Submission Time` <chr>, … processed_assignments_df <- process_assignments(gs_demo)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/process_gs_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Gradescope Data — process_gs_data","title":"Process Gradescope Data — process_gs_data","text":"function takes gradescope dataframe processes completely.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/process_gs_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Gradescope Data — process_gs_data","text":"","code":"process_gs_data(gs_data, wide_format = TRUE)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/process_gs_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Gradescope Data — process_gs_data","text":"gs_data dataframe (csv directly Gradescope) wide_format TRUE, keeps wide format; FALSE, pivots data","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/process_gs_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process Gradescope Data — process_gs_data","text":"Returns processed Gradescope data wide pivotted format","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/process_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Student IDs — process_id","title":"Process Student IDs — process_id","text":"function processes dataset student IDs. handles erroneous student IDs filtering duplicates handling NA values. function returns dataframe unique student IDs","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/process_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Student IDs — process_id","text":"","code":"process_id(gs_data)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/process_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Student IDs — process_id","text":"gs_data dataframe (csv Gradescope) containing column named \"sid\" holds student IDs.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/process_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process Student IDs — process_id","text":"dataframe \"unique_ids\": dataframe containing unique student IDs.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/process_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process Student IDs — process_id","text":"","code":"# Example dataframe data <- data.frame(   sid = c(3032412514, NA, 3032412516,           3032412517, 3032412518, 3032412519, 3032412520, 3032412521, 3032412521),    names = c(\"John Smith\", \"Jane Doe\", \"Robert Brown\", \"Emily Johnson\",            \"Michael Davis\", \"Linda Wilson\", \"James Taylor\", \"Patricia Anderson\", \"Patricia Anderson\"),   email = c(\"john.smith@berkeley.edu\", \"jane.doe@berkeley.edu\", \"robert.brown@berkeley.edu\",             \"emily.johnson@berkeley.edu\", \"michael.davis@berkeley.edu\",             \"linda.wilson@berkeley.edu\", \"james.taylor@berkeley.edu\",             \"patricia.anderson@berkeley.edu\", \"patricia.anderson@berkeley.edu\"             )  ) processed_data <- process_id(data)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/process_policy_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Assignment and Category Names in Policy File — process_policy_names","title":"Process Assignment and Category Names in Policy File — process_policy_names","text":"functions processes assignment subcategory names removing spaces, special characters, etc.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/process_policy_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Assignment and Category Names in Policy File — process_policy_names","text":"","code":"process_policy_names(policy)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/process_policy_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Assignment and Category Names in Policy File — process_policy_names","text":"policy policy file","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/process_policy_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process Assignment and Category Names in Policy File — process_policy_names","text":"policy file processed names","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/update_category.html","id":null,"dir":"Reference","previous_headings":"","what":"Add or update category to policy list — update_category","title":"Add or update category to policy list — update_category","text":"Add update category policy list","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/update_category.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add or update category to policy list — update_category","text":"","code":"update_category(   policy_list,   name = \"Category\",   slipdays = 0,   late_time1 = \"00:00:00\",   late_time2 = \"00:00:00\",   late_scale1 = 1,   late_scale2 = 0,   after = TRUE,   weight = 0,   drops = 0,   weight_method = c(\"equally\", \"by_points\"),   clobber = \"None\",   assigns = c() )"},{"path":"https://gradebook-dev.github.io/gradebook/reference/update_category.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add or update category to policy list — update_category","text":"policy_list policy list adding category previous one. name name category. slipdays allowed slip days. late_time1 cutoff first lateness policy. late_time2 cutoff second lateness policy. late_scale1 scale first lateness policy. late_scale2 scale second lateness policy. whether late_scale1/late_scale2 applied late_time1/late_time2 weight weight category. drops allowed drops category. weight_method whether weighted equally points. clobber whether clobbered. assigns assignments included category.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/update_category.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add or update category to policy list — update_category","text":"list.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/update_category.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add or update category to policy list — update_category","text":"","code":"update_category(name = \"Labs\") #> [[1]] #> [[1]]$name #> [1] \"Labs\" #>  #> [[1]]$slipdays #> [1] 0 #>  #> [[1]]$late_time1 #> [1] \"00:00:00\" #>  #> [[1]]$late_time2 #> [1] \"00:00:00\" #>  #> [[1]]$late_scale1 #> [1] 1 #>  #> [[1]]$late_scale2 #> [1] 0 #>  #> [[1]]$after #> [1] TRUE #>  #> [[1]]$weight #> [1] 0 #>  #> [[1]]$drops #> [1] 0 #>  #> [[1]]$weighted_method #> [1] \"equally\"   \"by_points\" #>  #> [[1]]$clobber #> [1] \"None\" #>  #> [[1]]$assigns #> NULL #>  #>  update_category(name = \"Quizzes\") #> [[1]] #> [[1]]$name #> [1] \"Quizzes\" #>  #> [[1]]$slipdays #> [1] 0 #>  #> [[1]]$late_time1 #> [1] \"00:00:00\" #>  #> [[1]]$late_time2 #> [1] \"00:00:00\" #>  #> [[1]]$late_scale1 #> [1] 1 #>  #> [[1]]$late_scale2 #> [1] 0 #>  #> [[1]]$after #> [1] TRUE #>  #> [[1]]$weight #> [1] 0 #>  #> [[1]]$drops #> [1] 0 #>  #> [[1]]$weighted_method #> [1] \"equally\"   \"by_points\" #>  #> [[1]]$clobber #> [1] \"None\" #>  #> [[1]]$assigns #> NULL #>  #>"}]
